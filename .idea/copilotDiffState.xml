<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false,&#10;    val isStreaming: Boolean = false&#10;) {&#10;    fun getFormattedTime(): String {&#10;        val sdf = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        return sdf.format(Date(timestamp))&#10;    }&#10;}&#10;&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;&#10;/**&#10; * 流式响应数据模型&#10; */&#10;data class StreamChoice(&#10;    val index: Int,&#10;    val delta: StreamDelta,&#10;    val finish_reason: String?&#10;)&#10;&#10;data class StreamDelta(&#10;    val content: String?&#10;)&#10;&#10;data class StreamResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;StreamChoice&gt;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceConfigManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceConfigManager.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;&#10;data class MqttConfig(&#10;    val serverUrl: String = &quot;mqtt://localhost&quot;,&#10;    val port: Int = 1883,&#10;    val clientId: String = &quot;PetNestIQ_Client&quot;,&#10;    val username: String = &quot;&quot;,&#10;    val password: String = &quot;&quot;,&#10;    val subscribeTopic: String = &quot;/device/data&quot;,&#10;    val publishTopic: String = &quot;/device/control&quot;,&#10;    val useSSL: Boolean = false,&#10;    val autoReconnect: Boolean = true&#10;)&#10;&#10;data class BluetoothConfig(&#10;    val deviceName: String = &quot;PetNest Device&quot;,&#10;    val macAddress: String = &quot;&quot;,&#10;    val autoConnect: Boolean = false,&#10;    val connectionTimeout: Int = 30&#10;)&#10;&#10;data class DeviceConfig(&#10;    val name: String,&#10;    val mqttConfig: MqttConfig,&#10;    val bluetoothConfig: BluetoothConfig,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class DeviceConfigManager private constructor(private val context: Context) {&#10;    private val preferences: SharedPreferences = context.getSharedPreferences(&#10;        &quot;device_config_prefs&quot;, Context.MODE_PRIVATE&#10;    )&#10;&#10;    private val gson = Gson()&#10;&#10;    // MQTT配置状态&#10;    private val _mqttConfig = MutableStateFlow(loadMqttConfig())&#10;    val mqttConfig: StateFlow&lt;MqttConfig&gt; = _mqttConfig.asStateFlow()&#10;&#10;    // 蓝牙配置状态&#10;    private val _bluetoothConfig = MutableStateFlow(loadBluetoothConfig())&#10;    val bluetoothConfig: StateFlow&lt;BluetoothConfig&gt; = _bluetoothConfig.asStateFlow()&#10;&#10;    // 已保存的配置列表&#10;    private val _configList = MutableStateFlow(loadConfigList())&#10;    val configList: StateFlow&lt;List&lt;String&gt;&gt; = _configList.asStateFlow()&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: DeviceConfigManager? = null&#10;&#10;        fun getInstance(context: Context): DeviceConfigManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: DeviceConfigManager(context.applicationContext).also { INSTANCE = it }&#10;            }&#10;        }&#10;&#10;        private const val KEY_MQTT_CONFIG = &quot;mqtt_config&quot;&#10;        private const val KEY_BLUETOOTH_CONFIG = &quot;bluetooth_config&quot;&#10;        private const val KEY_CONFIG_LIST = &quot;config_list&quot;&#10;        private const val KEY_CONFIG_PREFIX = &quot;saved_config_&quot;&#10;    }&#10;&#10;    // 加载MQTT配置&#10;    private fun loadMqttConfig(): MqttConfig {&#10;        val configJson = preferences.getString(KEY_MQTT_CONFIG, null)&#10;        return if (configJson != null) {&#10;            try {&#10;                gson.fromJson(configJson, MqttConfig::class.java) ?: MqttConfig()&#10;            } catch (e: Exception) {&#10;                MqttConfig() // 返回默认配置&#10;            }&#10;        } else {&#10;            MqttConfig() // 返回默认配置&#10;        }&#10;    }&#10;&#10;    // 加载蓝牙配置&#10;    private fun loadBluetoothConfig(): BluetoothConfig {&#10;        val configJson = preferences.getString(KEY_BLUETOOTH_CONFIG, null)&#10;        return if (configJson != null) {&#10;            try {&#10;                gson.fromJson(configJson, BluetoothConfig::class.java) ?: BluetoothConfig()&#10;            } catch (e: Exception) {&#10;                BluetoothConfig() // 返回默认配置&#10;            }&#10;        } else {&#10;            BluetoothConfig() // 返回默认配置&#10;        }&#10;    }&#10;&#10;    // 加载配置列表&#10;    private fun loadConfigList(): List&lt;String&gt; {&#10;        val configListJson = preferences.getString(KEY_CONFIG_LIST, null)&#10;        return if (configListJson != null) {&#10;            try {&#10;                val type = object : TypeToken&lt;List&lt;String&gt;&gt;() {}.type&#10;                gson.fromJson(configListJson, type) ?: emptyList()&#10;            } catch (e: Exception) {&#10;                emptyList()&#10;            }&#10;        } else {&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    // 更新MQTT配置&#10;    fun updateMqttConfig(config: MqttConfig) {&#10;        _mqttConfig.value = config&#10;        saveMqttConfig(config)&#10;    }&#10;&#10;    // 更新蓝牙配置&#10;    fun updateBluetoothConfig(config: BluetoothConfig) {&#10;        _bluetoothConfig.value = config&#10;        saveBluetoothConfig(config)&#10;    }&#10;&#10;    // 保存MQTT配置&#10;    private fun saveMqttConfig(config: MqttConfig) {&#10;        val configJson = gson.toJson(config)&#10;        preferences.edit()&#10;            .putString(KEY_MQTT_CONFIG, configJson)&#10;            .apply()&#10;    }&#10;&#10;    // 保存蓝牙配置&#10;    private fun saveBluetoothConfig(config: BluetoothConfig) {&#10;        val configJson = gson.toJson(config)&#10;        preferences.edit()&#10;            .putString(KEY_BLUETOOTH_CONFIG, configJson)&#10;            .apply()&#10;    }&#10;&#10;    // 保存完整配置组合&#10;    fun saveConfig(name: String) {&#10;        val deviceConfig = DeviceConfig(&#10;            name = name,&#10;            mqttConfig = _mqttConfig.value,&#10;            bluetoothConfig = _bluetoothConfig.value&#10;        )&#10;&#10;        // 保存配置到SharedPreferences&#10;        val configJson = gson.toJson(deviceConfig)&#10;        preferences.edit()&#10;            .putString(KEY_CONFIG_PREFIX + name, configJson)&#10;            .apply()&#10;&#10;        // 更新配置列表&#10;        val currentList = _configList.value.toMutableList()&#10;        if (!currentList.contains(name)) {&#10;            currentList.add(name)&#10;            _configList.value = currentList&#10;            saveConfigList(currentList)&#10;        }&#10;    }&#10;&#10;    // 加载完整配置组合&#10;    fun loadConfig(name: String) {&#10;        val configJson = preferences.getString(KEY_CONFIG_PREFIX + name, null)&#10;        if (configJson != null) {&#10;            try {&#10;                val deviceConfig = gson.fromJson(configJson, DeviceConfig::class.java)&#10;                if (deviceConfig != null) {&#10;                    updateMqttConfig(deviceConfig.mqttConfig)&#10;                    updateBluetoothConfig(deviceConfig.bluetoothConfig)&#10;                }&#10;            } catch (e: Exception) {&#10;                // 加载失败，保持当前配置&#10;            }&#10;        }&#10;    }&#10;&#10;    // 删除保存的配置&#10;    fun deleteConfig(name: String) {&#10;        preferences.edit()&#10;            .remove(KEY_CONFIG_PREFIX + name)&#10;            .apply()&#10;&#10;        val currentList = _configList.value.toMutableList()&#10;        currentList.remove(name)&#10;        _configList.value = currentList&#10;        saveConfigList(currentList)&#10;    }&#10;&#10;    // 保存配置列表&#10;    private fun saveConfigList(list: List&lt;String&gt;) {&#10;        val listJson = gson.toJson(list)&#10;        preferences.edit()&#10;            .putString(KEY_CONFIG_LIST, listJson)&#10;            .apply()&#10;    }&#10;&#10;    // 获取当前MQTT配置（用于其他组件访问）&#10;    fun getCurrentMqttConfig(): MqttConfig = _mqttConfig.value&#10;&#10;    // 获取当前蓝牙配置（用于其他组件访问）&#10;    fun getCurrentBluetoothConfig(): BluetoothConfig = _bluetoothConfig.value&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.SharedPreferences&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import com.google.gson.Gson&#13;&#10;import com.google.gson.reflect.TypeToken&#13;&#10;&#13;&#10;data class MqttConfig(&#13;&#10;    val serverUrl: String = &quot;ssl://e35491cb0c.st1.iotda-device.cn-north-4.myhuaweicloud.com&quot;,&#13;&#10;    val port: Int = 8883,&#13;&#10;    val clientId: String = &quot;688879e2d582f20018403921_text1_0_0_2025072907&quot;,&#13;&#10;    val username: String = &quot;688879e2d582f20018403921_text1&quot;,&#13;&#10;    val password: String = &quot;bdd6a2f87eab3e9dd81325957547fa3b5b566f1abfbdb9850249b3b4984f277e&quot;,&#13;&#10;    val subscribeTopic: String = &quot;/device/data&quot;,&#13;&#10;    val publishTopic: String = &quot;/device/control&quot;,&#13;&#10;    val useSSL: Boolean = true,&#13;&#10;    val autoReconnect: Boolean = true&#13;&#10;)&#13;&#10;&#13;&#10;data class BluetoothConfig(&#13;&#10;    val deviceName: String = &quot;PetNest Device&quot;,&#13;&#10;    val macAddress: String = &quot;&quot;,&#13;&#10;    val autoConnect: Boolean = false,&#13;&#10;    val connectionTimeout: Int = 30&#13;&#10;)&#13;&#10;&#13;&#10;data class DeviceConfig(&#13;&#10;    val name: String,&#13;&#10;    val mqttConfig: MqttConfig,&#13;&#10;    val bluetoothConfig: BluetoothConfig,&#13;&#10;    val timestamp: Long = System.currentTimeMillis()&#13;&#10;)&#13;&#10;&#13;&#10;class DeviceConfigManager private constructor(private val context: Context) {&#13;&#10;    private val preferences: SharedPreferences = context.getSharedPreferences(&#13;&#10;        &quot;device_config_prefs&quot;, Context.MODE_PRIVATE&#13;&#10;    )&#13;&#10;&#13;&#10;    private val gson = Gson()&#13;&#10;&#13;&#10;    // MQTT配置状态&#13;&#10;    private val _mqttConfig = MutableStateFlow(loadMqttConfig())&#13;&#10;    val mqttConfig: StateFlow&lt;MqttConfig&gt; = _mqttConfig.asStateFlow()&#13;&#10;&#13;&#10;    // 蓝牙配置状态&#13;&#10;    private val _bluetoothConfig = MutableStateFlow(loadBluetoothConfig())&#13;&#10;    val bluetoothConfig: StateFlow&lt;BluetoothConfig&gt; = _bluetoothConfig.asStateFlow()&#13;&#10;&#13;&#10;    // 已保存的配置列表&#13;&#10;    private val _configList = MutableStateFlow(loadConfigList())&#13;&#10;    val configList: StateFlow&lt;List&lt;String&gt;&gt; = _configList.asStateFlow()&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        @Volatile&#13;&#10;        private var INSTANCE: DeviceConfigManager? = null&#13;&#10;&#13;&#10;        fun getInstance(context: Context): DeviceConfigManager {&#13;&#10;            return INSTANCE ?: synchronized(this) {&#13;&#10;                INSTANCE ?: DeviceConfigManager(context.applicationContext).also { INSTANCE = it }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        private const val KEY_MQTT_CONFIG = &quot;mqtt_config&quot;&#13;&#10;        private const val KEY_BLUETOOTH_CONFIG = &quot;bluetooth_config&quot;&#13;&#10;        private const val KEY_CONFIG_LIST = &quot;config_list&quot;&#13;&#10;        private const val KEY_CONFIG_PREFIX = &quot;saved_config_&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载MQTT配置&#13;&#10;    private fun loadMqttConfig(): MqttConfig {&#13;&#10;        val configJson = preferences.getString(KEY_MQTT_CONFIG, null)&#13;&#10;        return if (configJson != null) {&#13;&#10;            try {&#13;&#10;                gson.fromJson(configJson, MqttConfig::class.java) ?: MqttConfig()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                MqttConfig() // 返回默认配置&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            MqttConfig() // 返回默认配置&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载蓝牙配置&#13;&#10;    private fun loadBluetoothConfig(): BluetoothConfig {&#13;&#10;        val configJson = preferences.getString(KEY_BLUETOOTH_CONFIG, null)&#13;&#10;        return if (configJson != null) {&#13;&#10;            try {&#13;&#10;                gson.fromJson(configJson, BluetoothConfig::class.java) ?: BluetoothConfig()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                BluetoothConfig() // 返回默认配置&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            BluetoothConfig() // 返回默认配置&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载配置列表&#13;&#10;    private fun loadConfigList(): List&lt;String&gt; {&#13;&#10;        val configListJson = preferences.getString(KEY_CONFIG_LIST, null)&#13;&#10;        return if (configListJson != null) {&#13;&#10;            try {&#13;&#10;                val type = object : TypeToken&lt;List&lt;String&gt;&gt;() {}.type&#13;&#10;                gson.fromJson(configListJson, type) ?: emptyList()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                emptyList()&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            emptyList()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 更新MQTT配置&#13;&#10;    fun updateMqttConfig(config: MqttConfig) {&#13;&#10;        _mqttConfig.value = config&#13;&#10;        saveMqttConfig(config)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 更新蓝牙配置&#13;&#10;    fun updateBluetoothConfig(config: BluetoothConfig) {&#13;&#10;        _bluetoothConfig.value = config&#13;&#10;        saveBluetoothConfig(config)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存MQTT配置&#13;&#10;    private fun saveMqttConfig(config: MqttConfig) {&#13;&#10;        val configJson = gson.toJson(config)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_MQTT_CONFIG, configJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存蓝牙配置&#13;&#10;    private fun saveBluetoothConfig(config: BluetoothConfig) {&#13;&#10;        val configJson = gson.toJson(config)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_BLUETOOTH_CONFIG, configJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存完整配置组合&#13;&#10;    fun saveConfig(name: String) {&#13;&#10;        val deviceConfig = DeviceConfig(&#13;&#10;            name = name,&#13;&#10;            mqttConfig = _mqttConfig.value,&#13;&#10;            bluetoothConfig = _bluetoothConfig.value&#13;&#10;        )&#13;&#10;&#13;&#10;        // 保存配置到SharedPreferences&#13;&#10;        val configJson = gson.toJson(deviceConfig)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_CONFIG_PREFIX + name, configJson)&#13;&#10;            .apply()&#13;&#10;&#13;&#10;        // 更新配置列表&#13;&#10;        val currentList = _configList.value.toMutableList()&#13;&#10;        if (!currentList.contains(name)) {&#13;&#10;            currentList.add(name)&#13;&#10;            _configList.value = currentList&#13;&#10;            saveConfigList(currentList)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载完整配置组合&#13;&#10;    fun loadConfig(name: String) {&#13;&#10;        val configJson = preferences.getString(KEY_CONFIG_PREFIX + name, null)&#13;&#10;        if (configJson != null) {&#13;&#10;            try {&#13;&#10;                val deviceConfig = gson.fromJson(configJson, DeviceConfig::class.java)&#13;&#10;                if (deviceConfig != null) {&#13;&#10;                    updateMqttConfig(deviceConfig.mqttConfig)&#13;&#10;                    updateBluetoothConfig(deviceConfig.bluetoothConfig)&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                // 加载失败，保持当前配置&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 删除保存的配置&#13;&#10;    fun deleteConfig(name: String) {&#13;&#10;        preferences.edit()&#13;&#10;            .remove(KEY_CONFIG_PREFIX + name)&#13;&#10;            .apply()&#13;&#10;&#13;&#10;        val currentList = _configList.value.toMutableList()&#13;&#10;        currentList.remove(name)&#13;&#10;        _configList.value = currentList&#13;&#10;        saveConfigList(currentList)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存配置列表&#13;&#10;    private fun saveConfigList(list: List&lt;String&gt;) {&#13;&#10;        val listJson = gson.toJson(list)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_CONFIG_LIST, listJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 获取当前MQTT配置（用于其他组件访问）&#13;&#10;    fun getCurrentMqttConfig(): MqttConfig = _mqttConfig.value&#13;&#10;&#13;&#10;    // 获取当前蓝牙配置（用于其他组件访问）&#13;&#10;    fun getCurrentBluetoothConfig(): BluetoothConfig = _bluetoothConfig.value&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceDataManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceDataManager.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.State&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlin.random.Random&#10;&#10;// 设备数据类&#10;data class DeviceData(&#10;    val temperature: Float,&#10;    val humidity: Float,&#10;    val foodAmount: Float,&#10;    val waterAmount: Float,&#10;    val ventilationStatus: Boolean = false,&#10;    val disinfectionStatus: Boolean = false,&#10;    val heatingStatus: Boolean = false,&#10;    val targetTemperature: Float = 25f,&#10;    val lastUpdateTime: String = getCurrentTime()&#10;)&#10;&#10;// 获取当前时间&#10;private fun getCurrentTime(): String {&#10;    val formatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;    return formatter.format(java.util.Date())&#10;}&#10;&#10;// 设备数据管理器（单例模式）&#10;class DeviceDataManager private constructor() {&#10;&#10;    // 使用StateFlow管理数据状态&#10;    private val _deviceData = MutableStateFlow(&#10;        DeviceData(&#10;            temperature = MockDataGenerator.getCurrentValue(DataType.TEMPERATURE),&#10;            humidity = MockDataGenerator.getCurrentValue(DataType.HUMIDITY),&#10;            foodAmount = MockDataGenerator.getCurrentValue(DataType.FOOD),&#10;            waterAmount = MockDataGenerator.getCurrentValue(DataType.WATER)&#10;        )&#10;    )&#10;    val deviceData: StateFlow&lt;DeviceData&gt; = _deviceData.asStateFlow()&#10;&#10;    // 连接状态&#10;    private val _connectionStatus = MutableStateFlow&lt;String?&gt;(null)&#10;    val connectionStatus: StateFlow&lt;String?&gt; = _connectionStatus.asStateFlow()&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: DeviceDataManager? = null&#10;&#10;        fun getInstance(): DeviceDataManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: DeviceDataManager().also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;&#10;    // 更新设备数据&#10;    fun updateDeviceData(newData: DeviceData) {&#10;        _deviceData.value = newData.copy(lastUpdateTime = getCurrentTime())&#10;    }&#10;&#10;    // 更新单个数据项&#10;    fun updateTemperature(temperature: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            temperature = temperature,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateHumidity(humidity: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            humidity = humidity,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateFoodAmount(amount: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            foodAmount = amount,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateWaterAmount(amount: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            waterAmount = amount,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    // 更新设备状态&#10;    fun updateVentilationStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            ventilationStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateDisinfectionStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            disinfectionStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateHeatingStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            heatingStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateTargetTemperature(temperature: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            targetTemperature = temperature,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    // 更新连接状态&#10;    fun updateConnectionStatus(status: String?) {&#10;        _connectionStatus.value = status&#10;    }&#10;&#10;    // 模拟数据更新（用于测试）&#10;//    fun simulateDataUpdate() {&#10;//        val currentData = _deviceData.value&#10;//        val newData = currentData.copy(&#10;//            temperature = (currentData.temperature + (Random.nextFloat() - 0.5f) * 2).coerceIn(15f, 35f),&#10;//            humidity = (currentData.humidity + (Random.nextFloat() - 0.5f) * 5).coerceIn(40f, 85f),&#10;//            foodAmount = maxOf(0f, currentData.foodAmount - Random.nextFloat() * 10),&#10;//            waterAmount = maxOf(0f, currentData.waterAmount - Random.nextFloat() * 15),&#10;//            lastUpdateTime = getCurrentTime()&#10;//        )&#10;//        _deviceData.value = newData&#10;//    }&#10;&#10;    // 获取指定数据类型的当前值&#10;    fun getCurrentValue(dataType: DataType): Float {&#10;        return when (dataType) {&#10;            DataType.TEMPERATURE -&gt; _deviceData.value.temperature&#10;            DataType.HUMIDITY -&gt; _deviceData.value.humidity&#10;            DataType.FOOD -&gt; _deviceData.value.foodAmount&#10;            DataType.WATER -&gt; _deviceData.value.waterAmount&#10;        }&#10;    }&#10;&#10;    // 新增方法：定时更新设备数据以模拟真实数据变化&#10;    fun startPeriodicDataUpdate() {&#10;        // 这个方法可以在MainActivity中调用，定时更新数据&#10;        // 暂时留空，实际应用中可以结合协程实现定时更新&#10;    }&#10;&#10;    // 新增方法：刷新当前数据&#10;    fun startPeriodicDataUpdate() {&#10;        // 这个方法可以在MainActivity中调用，定时更新数据&#10;        // 暂时留空，实际应用中可以结合协程实现定时更新&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#10;&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.State&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlin.random.Random&#10;&#10;// 设备数据类&#10;data class DeviceData(&#10;    val temperature: Float,&#10;    val humidity: Float,&#10;    val foodAmount: Float,&#10;    val waterAmount: Float,&#10;    val ventilationStatus: Boolean = false,&#10;    val disinfectionStatus: Boolean = false,&#10;    val heatingStatus: Boolean = false,&#10;    val targetTemperature: Float = 25f,&#10;    val lastUpdateTime: String = getCurrentTime()&#10;)&#10;&#10;// 获取当前时间&#10;private fun getCurrentTime(): String {&#10;    val formatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;    return formatter.format(java.util.Date())&#10;}&#10;&#10;// 设备数据管理器（单例模式）&#10;class DeviceDataManager private constructor() {&#10;&#10;    // 使用StateFlow管理数据状态，初始化时使用统一的数据生成器&#10;    private val _deviceData = MutableStateFlow(&#10;        DeviceData(&#10;            temperature = MockDataGenerator.getCurrentValue(DataType.TEMPERATURE),&#10;            humidity = MockDataGenerator.getCurrentValue(DataType.HUMIDITY),&#10;            foodAmount = MockDataGenerator.getCurrentValue(DataType.FOOD),&#10;            waterAmount = MockDataGenerator.getCurrentValue(DataType.WATER)&#10;        )&#10;    )&#10;    val deviceData: StateFlow&lt;DeviceData&gt; = _deviceData.asStateFlow()&#10;&#10;    // 连接状态&#10;    private val _connectionStatus = MutableStateFlow&lt;String?&gt;(null)&#10;    val connectionStatus: StateFlow&lt;String?&gt; = _connectionStatus.asStateFlow()&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: DeviceDataManager? = null&#10;&#10;        fun getInstance(): DeviceDataManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: DeviceDataManager().also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;&#10;    // 更新设备数据&#10;    fun updateDeviceData(newData: DeviceData) {&#10;        _deviceData.value = newData.copy(lastUpdateTime = getCurrentTime())&#10;    }&#10;&#10;    // 更新单个数据项&#10;    fun updateTemperature(temperature: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            temperature = temperature,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateHumidity(humidity: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            humidity = humidity,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateFoodAmount(amount: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            foodAmount = amount,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateWaterAmount(amount: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            waterAmount = amount,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    // 更新设备状态&#10;    fun updateVentilationStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            ventilationStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateDisinfectionStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            disinfectionStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateHeatingStatus(status: Boolean) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            heatingStatus = status,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    fun updateTargetTemperature(temperature: Float) {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            targetTemperature = temperature,&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    // 更新连接状态&#10;    fun updateConnectionStatus(status: String?) {&#10;        _connectionStatus.value = status&#10;    }&#10;&#10;    // 模拟数据更新（用于测试）&#10;//    fun simulateDataUpdate() {&#10;//        val currentData = _deviceData.value&#10;//        val newData = currentData.copy(&#10;//            temperature = (currentData.temperature + (Random.nextFloat() - 0.5f) * 2).coerceIn(15f, 35f),&#10;//            humidity = (currentData.humidity + (Random.nextFloat() - 0.5f) * 5).coerceIn(40f, 85f),&#10;//            foodAmount = maxOf(0f, currentData.foodAmount - Random.nextFloat() * 10),&#10;//            waterAmount = maxOf(0f, currentData.waterAmount - Random.nextFloat() * 15),&#10;//            lastUpdateTime = getCurrentTime()&#10;//        )&#10;//        _deviceData.value = newData&#10;//    }&#10;&#10;    // 获取指定数据类型的当前值&#10;    fun getCurrentValue(dataType: DataType): Float {&#10;        return when (dataType) {&#10;            DataType.TEMPERATURE -&gt; _deviceData.value.temperature&#10;            DataType.HUMIDITY -&gt; _deviceData.value.humidity&#10;            DataType.FOOD -&gt; _deviceData.value.foodAmount&#10;            DataType.WATER -&gt; _deviceData.value.waterAmount&#10;        }&#10;    }&#10;&#10;    // 新增方法：刷新当前数据，确保与图表数据同步&#10;    fun refreshCurrentData() {&#10;        MockDataGenerator.clearCache() // 清除缓存以获取新的随机数据&#10;        _deviceData.value = _deviceData.value.copy(&#10;            temperature = MockDataGenerator.getCurrentValue(DataType.TEMPERATURE),&#10;            humidity = MockDataGenerator.getCurrentValue(DataType.HUMIDITY),&#10;            foodAmount = MockDataGenerator.getCurrentValue(DataType.FOOD),&#10;            waterAmount = MockDataGenerator.getCurrentValue(DataType.WATER),&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;&#10;    // 新增方法：定期更新数据以保持同步&#10;    fun updateWithCurrentValues() {&#10;        _deviceData.value = _deviceData.value.copy(&#10;            temperature = MockDataGenerator.getCurrentValue(DataType.TEMPERATURE),&#10;            humidity = MockDataGenerator.getCurrentValue(DataType.HUMIDITY),&#10;            foodAmount = MockDataGenerator.getCurrentValue(DataType.FOOD),&#10;            waterAmount = MockDataGenerator.getCurrentValue(DataType.WATER),&#10;            lastUpdateTime = getCurrentTime()&#10;        )&#10;    }&#10;}&#10;&#10;// 数据类型枚举（移动到这里以便共享）&#10;enum class DataType(val title: String, val unit: String, val color: androidx.compose.ui.graphics.Color) {&#10;    TEMPERATURE(&quot;温度&quot;, &quot;°C&quot;, androidx.compose.ui.graphics.Color.Red),&#10;    HUMIDITY(&quot;湿度&quot;, &quot;%&quot;, androidx.compose.ui.graphics.Color.Blue),&#10;    FOOD(&quot;食物量&quot;, &quot;g&quot;, androidx.compose.ui.graphics.Color.Green),&#10;    WATER(&quot;水量&quot;, &quot;ml&quot;, androidx.compose.ui.graphics.Color.Cyan)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/MockDataGenerator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/MockDataGenerator.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import java.time.LocalDate&#10;import java.time.LocalDateTime&#10;import kotlin.math.*&#10;import kotlin.random.Random&#10;&#10;/**&#10; * 统一的模拟数据生成器&#10; * 确保设备页面和详细页面的数据一致性&#10; */&#10;object MockDataGenerator {&#10;&#10;    // 数据缓存，确保同一时间点的数据一致&#10;    private val dataCache = mutableMapOf&lt;String, Float&gt;()&#10;&#10;    /**&#10;     * 生成温度数据&#10;     * 模拟真实的温度变化规律：&#10;     * - 白天（6:00-18:00）温度较高&#10;     * - 夜晚（18:00-6:00）温度较低&#10;     * - 有合理的随机波动&#10;     * - 温度范围在24-30度之间&#10;     */&#10;    fun generateTemperatureValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;temp_${hour}_${minute}&quot;&#10;&#10;        return dataCache.getOrPut(timeKey) {&#10;            // 基础温度曲线：使用正弦函数模拟日夜温差，调整为24-30度范围&#10;            val baseTemp = 27f + 3f * sin((hour - 6) * PI / 12).toFloat()&#10;&#10;            // 添加小幅随机波动 (±0.8°C)&#10;            val noise = (Random.nextFloat() - 0.5f) * 1.6f&#10;&#10;            // 确保温度在合理范围内24-30度&#10;            (baseTemp + noise).coerceIn(24f, 30f)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成湿度数据&#10;     * 模拟真实的湿度变化规律：&#10;     * - 早晨湿度较高&#10;     * - 中午湿度较低&#10;     * - 傍晚湿度回升&#10;     */&#10;    fun generateHumidityValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;humidity_${hour}_${minute}&quot;&#10;&#10;        return dataCache.getOrPut(timeKey) {&#10;            // 基础湿度曲线：早晚高，中午低&#10;            val baseHumidity = 65f + 12f * cos((hour - 2) * PI / 12).toFloat()&#10;&#10;            // 添加随机波动 (±3%)&#10;            val noise = (Random.nextFloat() - 0.5f) * 6f&#10;&#10;            // 确保湿度在合理范围内&#10;            (baseHumidity + noise).coerceIn(45f, 80f)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成食物量数据&#10;     * 模拟真实的喂食规律：&#10;     * - 每天4次喂食：7:00, 13:00, 19:00, 1:00（凌晨补充）&#10;     * - 喂食后食物量快速增加到最大值&#10;     * - 分段消耗，但每次消耗量有随机性&#10;     */&#10;    fun generateFoodValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;food_${hour}_${minute}&quot;&#10;&#10;        return dataCache.getOrPut(timeKey) {&#10;            val currentTime = hour * 60 + minute&#10;&#10;            // 喂食时间点：1:00(凌晨), 7:00, 13:00, 19:00&#10;            val feedingTimes = listOf(1 * 60, 7 * 60, 13 * 60, 19 * 60)&#10;&#10;            // 找到最近的喂食时间&#10;            val lastFeedingTime = feedingTimes.lastOrNull { it &lt;= currentTime }&#10;                ?: (feedingTimes.last() - 24 * 60) // 如果是凌晨1点前，则是昨天19点&#10;&#10;            // 计算距离上次喂食的时间（分钟）&#10;            val timeSinceFeeding = if (lastFeedingTime &lt; 0) {&#10;                currentTime + (24 * 60 + lastFeedingTime)&#10;            } else {&#10;                currentTime - lastFeedingTime&#10;            }&#10;&#10;            // 基于时间的渐进式消耗，模拟宠物间歇性进食&#10;            val maxAmount = 450f&#10;            val timeHours = timeSinceFeeding / 60f&#10;&#10;            // 使用指数衰减函数模拟食物消耗，加入随机性&#10;            val decayRate = 0.3f + Random.nextFloat() * 0.2f // 0.3-0.5的衰减率&#10;            val randomConsumption = Random.nextFloat() * 0.3f + 0.1f // 额外的随机消耗10-40%&#10;&#10;            // 计算剩余食物量：基础衰减 + 随机消耗&#10;            val baseRemaining = maxAmount * exp(-decayRate * timeHours)&#10;            val randomReduction = baseRemaining * randomConsumption * (timeHours / 6f) // 时间越长，随机消耗越多&#10;&#10;            val currentAmount = (baseRemaining - randomReduction).coerceIn(20f, maxAmount)&#10;&#10;            // 在特定时间段增加一些波动（模拟宠物活跃期）&#10;            val activityBonus = when (hour) {&#10;                in 6..8, in 17..19 -&gt; Random.nextFloat() * 15f - 30f // 活跃期消耗更多&#10;                in 22..23, in 0..5 -&gt; Random.nextFloat() * 10f // 休息期消耗较少&#10;                else -&gt; Random.nextFloat() * 20f - 10f&#10;            }&#10;&#10;            (currentAmount + activityBonus).coerceIn(0f, maxAmount)&#10;     * - 每天3次加水：0:00(凌晨), 8:00, 16:00&#10;     * - 加水后水量快速增加到最大值&#10;&#10;            // 计算距离上次加水的时间（分钟）&#10;            val timeSinceRefill = if (lastRefillTime &lt; 0) {&#10;&#10;&#10;                currentTime - lastRefillTime&#10;            }&#10;&#10;            // 加水时间点：0:00(凌晨), 8:00, 16:00&#10;     * 模拟真实的饮水规律：&#10;     * - 每天3次加水：0:00(凌晨), 8:00, 16:00&#10;     * - 加水后水量快速增加到最大值&#10;     * - 分段消耗，但每次消耗量有随机性，受温度影响&#10;&#10;            // 计算距离上次加水的时间（分钟）&#10;            val timeSinceRefill = if (lastRefillTime &lt; 0) {&#10;&#10;&#10;                currentTime - lastRefillTime&#10;            val baseRemaining = maxAmount * exp(-tempAdjustedDecayRate * timeHours)&#10;&#10;            // 加水时间点：0:00(凌晨), 8:00, 16:00&#10;            val refillTimes = listOf(0 * 60, 8 * 60, 16 * 60)&#10;&#10;            // 找到最近的加水时间&#10;            val lastRefillTime = refillTimes.lastOrNull { it &lt;= currentTime }&#10;                ?: (refillTimes.last() - 24 * 60) // 如果是凌晨0点前，则是昨天16点&#10;&#10;            // 计算距离上次加水的时间（分钟）&#10;            val timeSinceRefill = if (lastRefillTime &lt; 0) {&#10;                currentTime + (24 * 60 + lastRefillTime)&#10;&#10;                currentTime - lastRefillTime&#10;            val baseRemaining = maxAmount * exp(-tempAdjustedDecayRate * timeHours)&#10;&#10;            // 基于时间的渐进式消耗，模拟宠物间歇性进食&#10;            val timeHours = timeSinceRefill / 60f&#10;&#10;            // 水的消耗受温度影响&#10;            val currentAmount = (baseRemaining - randomReduction).coerceIn(15f, maxAmount)&#10;            val tempFactor = 1f + (currentTemp - 27f) * 0.05f // 温度每高1度，消耗增加5%&#10;&#10;            // 使用更快的衰减率模拟水的快速消耗&#10;            val baseDecayRate = 0.4f + Random.nextFloat() * 0.3f // 0.4-0.7的衰减率&#10;            val tempAdjustedDecayRate = baseDecayRate * tempFactor&#10;&#10;            // 计算基础剩余水量&#10;            val baseRemaining = maxAmount * exp(-tempAdjustedDecayRate * timeHours)&#10;&#10;            // 随机消耗（模拟宠物不规律的饮水习惯）&#10;            val randomConsumption = Random.nextFloat() * 0.4f + 0.1f // 10-50%的随机消耗&#10;            val randomReduction = baseRemaining * randomConsumption * (timeHours / 8f)&#10;&#10;            val currentAmount = (baseRemaining - randomReduction).coerceIn(15f, maxAmount)&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#10;&#10;import java.time.LocalDate&#10;import java.time.LocalDateTime&#10;import kotlin.math.*&#10;import kotlin.random.Random&#10;&#10;/**&#10; * 统一的模拟数据生成器&#10; * 确保设备页面和详细页面的数据一致性&#10; */&#10;object MockDataGenerator {&#10;&#10;    // 数据缓存，确保同一时间点的数据一致&#10;    private val dataCache = mutableMapOf&lt;String, Float&gt;()&#10;&#10;    /**&#10;     * 生成温度数据&#10;     * 模拟真实的温度变化规律：&#10;     * - 白天（6:00-18:00）温度较高&#10;     * - 夜晚（18:00-6:00）温度较低&#10;     * - 有合理的随机波动&#10;     * - 温度范围在24-30度之间&#10;     */&#10;    fun generateTemperatureValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;temp_${hour}_${minute}&quot;&#10;&#10;        return dataCache.getOrPut(timeKey) {&#10;            // 基础温度曲线：使用正弦函数模拟日夜温差，调整为24-30度范围&#10;            val baseTemp = 27f + 3f * sin((hour - 6) * PI / 12).toFloat()&#10;&#10;            // 添加小幅随机波动 (±0.8°C)&#10;            val noise = (Random.nextFloat() - 0.5f) * 1.6f&#10;&#10;            // 确保温度在合理范围内24-30度&#10;            (baseTemp + noise).coerceIn(24f, 30f)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成湿度数据&#10;     * 模拟真实的湿度变化规律：&#10;     * - 早晨湿度较高&#10;     * - 中午湿度较低&#10;     * - 傍晚湿度回升&#10;     */&#10;    fun generateHumidityValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;humidity_${hour}_${minute}&quot;&#10;&#10;        return dataCache.getOrPut(timeKey) {&#10;            // 基础湿度曲线：早晚高，中午低&#10;            val baseHumidity = 65f + 12f * cos((hour - 2) * PI / 12).toFloat()&#10;&#10;            // 添加随机波动 (±3%)&#10;            val noise = (Random.nextFloat() - 0.5f) * 6f&#10;&#10;            // 确保湿度在合理范围内&#10;            (baseHumidity + noise).coerceIn(45f, 80f)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成食物量数据&#10;     * 模拟真实的宠物饮食规律：&#10;     * - 三餐时间：7:00, 13:00, 19:00 食物量高&#10;     * - 凌晨和深夜（0:00-6:00, 22:00-23:59）饮食量非常小&#10;     * - 其他时间饮食量适中&#10;     */&#10;    fun generateFoodValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;food_${hour}_${minute}&quot;&#10;        &#10;        return dataCache.getOrPut(timeKey) {&#10;            val currentTime = hour * 60 + minute&#10;            &#10;            // 三餐时间点：7:00, 13:00, 19:00&#10;            val mealTimes = listOf(7 * 60, 13 * 60, 19 * 60)&#10;            &#10;            // 找到最近的用餐时间&#10;            val lastMealTime = mealTimes.lastOrNull { it &lt;= currentTime } &#10;                ?: (mealTimes.last() - 24 * 60) // 如果是早上7点前，则是昨天19点&#10;            &#10;            // 计算距离上次用餐的时间（分钟）&#10;            val timeSinceMeal = if (lastMealTime &lt; 0) {&#10;                currentTime + (24 * 60 + lastMealTime)&#10;            } else {&#10;                currentTime - lastMealTime&#10;            }&#10;            &#10;            val maxAmount = 400f&#10;            val timeHours = timeSinceMeal / 60f&#10;            &#10;            // 根据时间段调整食物基础量和消耗率&#10;            val (baseMultiplier, consumptionRate) = when (hour) {&#10;                // 凌晨和深夜：饮食量非常小&#10;                in 0..5, in 22..23 -&gt; Pair(0.1f, 0.05f)&#10;                // 三餐时间前后1小时：饮食量高&#10;                in 6..8, in 12..14, in 18..20 -&gt; Pair(1.0f, 0.3f)&#10;                // 其他时间：饮食量适中&#10;                else -&gt; Pair(0.4f, 0.2f)&#10;            }&#10;            &#10;            // 使用指数衰减模拟食物消耗&#10;            val adjustedConsumptionRate = consumptionRate + Random.nextFloat() * 0.1f&#10;            val baseRemaining = maxAmount * baseMultiplier * exp(-adjustedConsumptionRate * timeHours)&#10;            &#10;            // 在用餐时间点附近，食物量会增加&#10;            val mealBonus = if (mealTimes.any { abs(currentTime - it) &lt;= 30 }) { // 用餐前后30分钟&#10;                Random.nextFloat() * 100f + 50f&#10;            } else 0f&#10;            &#10;            // 添加随机波动&#10;            val randomVariation = (Random.nextFloat() - 0.5f) * 20f&#10;            &#10;            val currentAmount = baseRemaining + mealBonus + randomVariation&#10;            &#10;            currentAmount.coerceIn(0f, maxAmount)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 生成水量数据&#10;     * 模拟真实的宠物饮水规律：&#10;     * - 活跃时间（6:00-9:00, 16:00-20:00）饮水量高&#10;     * - 凌晨和深夜（0:00-5:00, 21:00-23:59）饮水量非常小&#10;     * - 其他时间饮水量适中&#10;     * - 受温度影响&#10;     */&#10;    fun generateWaterValue(hour: Int, minute: Int = 0): Float {&#10;        val timeKey = &quot;water_${hour}_${minute}&quot;&#10;        &#10;        return dataCache.getOrPut(timeKey) {&#10;            val currentTime = hour * 60 + minute&#10;            &#10;            // 主要饮水时间点：8:00, 16:00&#10;            val drinkTimes = listOf(8 * 60, 16 * 60)&#10;            &#10;            // 找到最近的饮水时间&#10;            val lastDrinkTime = drinkTimes.lastOrNull { it &lt;= currentTime }&#10;                ?: (drinkTimes.last() - 24 * 60) // 如果是早上8点前，则是昨天16点&#10;            &#10;            // 计算距离上次主要饮水的时间（分钟）&#10;            val timeSinceDrink = if (lastDrinkTime &lt; 0) {&#10;                currentTime + (24 * 60 + lastDrinkTime)&#10;            } else {&#10;                currentTime - lastDrinkTime&#10;            }&#10;            &#10;            val maxAmount = 350f&#10;            val timeHours = timeSinceDrink / 60f&#10;            &#10;            // 获取当前温度影响&#10;            val currentTemp = generateTemperatureValue(hour, minute)&#10;            val tempFactor = 1f + (currentTemp - 27f) * 0.08f // 温度每高1度，需水量增加8%&#10;            &#10;            // 根据时间段调整水量基础量和消耗率&#10;            val (baseMultiplier, consumptionRate) = when (hour) {&#10;                // 凌晨和深夜：饮水量非常小&#10;                in 0..5, in 21..23 -&gt; Pair(0.15f, 0.02f)&#10;                // 活跃时间：饮水量高&#10;                in 6..9, in 16..20 -&gt; Pair(1.0f, 0.4f)&#10;                // 中午高温时间：饮水量较高&#10;                in 10..15 -&gt; Pair(0.8f, 0.5f)&#10;                else -&gt; Pair(0.5f, 0.3f)&#10;            }&#10;            &#10;            // 使用指数衰减模拟水量消耗，考虑温度因素&#10;            val adjustedConsumptionRate = (consumptionRate * tempFactor) + Random.nextFloat() * 0.15f&#10;            val baseRemaining = maxAmount * baseMultiplier * exp(-adjustedConsumptionRate * timeHours)&#10;            &#10;            // 在主要饮水时间点附近，水量会增加&#10;            val drinkBonus = if (drinkTimes.any { abs(currentTime - it) &lt;= 45 }) { // 饮水前后45分钟&#10;                Random.nextFloat() * 80f + 40f&#10;            } else 0f&#10;            &#10;            // 温度相关的额外消耗/补充&#10;            val tempAdjustment = when {&#10;                currentTemp &gt; 28f -&gt; -(Random.nextFloat() * 15f) // 高温时额外消耗&#10;                currentTemp &lt; 25f -&gt; Random.nextFloat() * 8f    // 低温时消耗减少&#10;                else -&gt; 0f&#10;            }&#10;            &#10;            // 添加随机波动&#10;            val randomVariation = (Random.nextFloat() - 0.5f) * 25f&#10;            &#10;            val currentAmount = baseRemaining + drinkBonus + tempAdjustment + randomVariation&#10;            &#10;            currentAmount.coerceIn(0f, maxAmount)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 清除数据缓存（用于刷新数据）&#10;     */&#10;    fun clearCache() {&#10;        dataCache.clear()&#10;    }&#10;&#10;    /**&#10;     * 获取当前时间的实时数据&#10;     */&#10;    fun getCurrentValue(dataType: DataType): Float {&#10;        val now = LocalDateTime.now()&#10;        return when (dataType) {&#10;            DataType.TEMPERATURE -&gt; generateTemperatureValue(now.hour, now.minute)&#10;            DataType.HUMIDITY -&gt; generateHumidityValue(now.hour, now.minute)&#10;            DataType.FOOD -&gt; generateFoodValue(now.hour, now.minute)&#10;            DataType.WATER -&gt; generateWaterValue(now.hour, now.minute)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成24小时的图表数据（设备页面用）&#10;     */&#10;    fun generate24HourChartData(dataType: DataType): List&lt;ChartDataPoint&gt; {&#10;        return (0..23).map { hour -&gt;&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; generateTemperatureValue(hour)&#10;                DataType.HUMIDITY -&gt; generateHumidityValue(hour)&#10;                DataType.FOOD -&gt; generateFoodValue(hour)&#10;                DataType.WATER -&gt; generateWaterValue(hour)&#10;            }&#10;            ChartDataPoint(hour, value)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 生成详细数据（详细页面用）&#10;     */&#10;    fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;        val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;        // 每15分钟生成一个数据点&#10;        for (hour in 0..23) {&#10;            for (minute in 0 until 60 step 15) {&#10;                val value = when (dataType) {&#10;                    DataType.TEMPERATURE -&gt; generateTemperatureValue(hour, minute)&#10;                    DataType.HUMIDITY -&gt; generateHumidityValue(hour, minute)&#10;                    DataType.FOOD -&gt; generateFoodValue(hour, minute)&#10;                    DataType.WATER -&gt; generateWaterValue(hour, minute)&#10;                }&#10;&#10;                data.add(&#10;                    DetailDataPoint(&#10;                        hour = hour,&#10;                        minute = minute,&#10;                        value = value,&#10;                        timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        return data&#10;    }&#10;}&#10;&#10;// 数据点类（从DeviceScreen.kt移动到这里）&#10;data class ChartDataPoint(&#10;    val hour: Int,&#10;    val value: Float&#10;)&#10;&#10;// 详细数据点类（从DetailScreen.kt移动到这里）&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/navigation/NavigationItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/navigation/NavigationItem.kt" />
              <option name="originalContent" value="package com.example.petnestiq.navigation&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;sealed class NavigationItem(&#10;    val route: String,&#10;    val title: String,&#10;    val icon: ImageVector&#10;) {&#10;    object Device : NavigationItem(&quot;device&quot;, &quot;设备&quot;, Icons.Default.Devices)&#10;    object Message : NavigationItem(&quot;message&quot;, &quot;消息&quot;, Icons.Default.Message)&#10;    object Profile : NavigationItem(&quot;profile&quot;, &quot;我的&quot;, Icons.Default.Person)&#10;&#10;    // AI聊天页面&#10;    object AiChat : NavigationItem(&quot;ai_chat&quot;, &quot;AI助手&quot;, Icons.Default.SmartToy)&#10;&#10;    // 详细数据界面路由&#10;    object TemperatureDetail : NavigationItem(&quot;temperature_detail&quot;, &quot;温度详情&quot;, Icons.Default.Thermostat)&#10;    object HumidityDetail : NavigationItem(&quot;humidity_detail&quot;, &quot;湿度详情&quot;, Icons.Default.WaterDrop)&#10;    object FoodDetail : NavigationItem(&quot;food_detail&quot;, &quot;食物详情&quot;, Icons.Default.Restaurant)&#10;    object WaterDetail : NavigationItem(&quot;water_detail&quot;, &quot;水量详情&quot;, Icons.Default.LocalDrink)&#10;&#10;    // 用户资料编辑页面&#10;    object UserProfileEdit : NavigationItem(&quot;user_profile_edit&quot;, &quot;编辑资料&quot;, Icons.Default.Edit)&#10;&#10;    // 设备管理页面&#10;    object DeviceManagement : NavigationItem(&quot;device_management&quot;, &quot;设备管理&quot;, Icons.Default.Settings)&#10;}&#10;&#10;val navigationItems = listOf(&#10;    NavigationItem.Device,&#10;    NavigationItem.Message,&#10;    NavigationItem.Profile&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.navigation&#13;&#10;&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.ui.graphics.vector.ImageVector&#13;&#10;&#13;&#10;sealed class NavigationItem(&#13;&#10;    val route: String,&#13;&#10;    val title: String,&#13;&#10;    val icon: ImageVector&#13;&#10;) {&#13;&#10;    object Device : NavigationItem(&quot;device&quot;, &quot;设备&quot;, Icons.Default.Devices)&#13;&#10;    object Message : NavigationItem(&quot;message&quot;, &quot;消息&quot;, Icons.Default.Message)&#13;&#10;    object Profile : NavigationItem(&quot;profile&quot;, &quot;我的&quot;, Icons.Default.Person)&#13;&#10;&#13;&#10;    // AI聊天页面&#13;&#10;    object AiChat : NavigationItem(&quot;ai_chat&quot;, &quot;AI助手&quot;, Icons.Default.SmartToy)&#13;&#10;&#13;&#10;    // 详细数据界面路由&#13;&#10;    object TemperatureDetail : NavigationItem(&quot;temperature_detail&quot;, &quot;温度详情&quot;, Icons.Default.Thermostat)&#13;&#10;    object HumidityDetail : NavigationItem(&quot;humidity_detail&quot;, &quot;湿度详情&quot;, Icons.Default.WaterDrop)&#13;&#10;    object FoodDetail : NavigationItem(&quot;food_detail&quot;, &quot;食物详情&quot;, Icons.Default.Restaurant)&#13;&#10;    object WaterDetail : NavigationItem(&quot;water_detail&quot;, &quot;水量详情&quot;, Icons.Default.LocalDrink)&#13;&#10;&#13;&#10;    // 用户资料编辑页面&#13;&#10;    object UserProfileEdit : NavigationItem(&quot;user_profile_edit&quot;, &quot;编辑资料&quot;, Icons.Default.Edit)&#13;&#10;&#13;&#10;    // 设备管理页面&#13;&#10;    object DeviceManagement : NavigationItem(&quot;device_management&quot;, &quot;设备管理&quot;, Icons.Default.Settings)&#13;&#10;    &#13;&#10;    // 设置中心页面&#13;&#10;    object SettingsCenter : NavigationItem(&quot;settings_center&quot;, &quot;设置中心&quot;, Icons.Default.Settings)&#13;&#10;    &#13;&#10;    // 使用与反馈页面&#13;&#10;    object UsageFeedback : NavigationItem(&quot;usage_feedback&quot;, &quot;使用与反馈&quot;, Icons.Default.Feedback)&#13;&#10;}&#13;&#10;&#13;&#10;val navigationItems = listOf(&#13;&#10;    NavigationItem.Device,&#13;&#10;    NavigationItem.Message,&#13;&#10;    NavigationItem.Profile&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/DetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/DetailScreen.kt" />
              <option name="originalContent" value="package com.example.petnestiq.screens&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Path&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.graphics.StrokeJoin&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.graphics.drawscope.drawIntoCanvas&#10;import androidx.compose.ui.graphics.nativeCanvas&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.petnestiq.data.DeviceDataManager&#10;import com.example.petnestiq.data.DataType&#10;import kotlin.math.sin&#10;import kotlin.random.Random&#10;import kotlin.math.sin&#10;import kotlin.random.Random&#10;&#10;// 详细数据点&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;// 详细数据点&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;// 详细数据点&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;        generateDetailData(dataType, selectedDate)&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;    // 生成模拟详细数据&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;    // 生成模拟详细数据&#10;&#10;        generateDetailData(dataType, selectedDate)&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;    // 生成模拟详细数据&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;    // 生成模拟详细数据&#10;&#10;        generateDetailData(dataType, selectedDate)&#10;data class DetailDataPoint(&#10;    val hour: Int,&#10;    val minute: Int,&#10;    val value: Float,&#10;    val timestamp: String&#10;)&#10;&#10;    // 生成模拟详细数据&#10;data class DailySummary(&#10;    val maxValue: Float,&#10;    val minValue: Float,&#10;    val avgValue: Float,&#10;    val maxTime: String,&#10;    // 生成模拟详细数据&#10;)&#10;        generateDetailData(dataType, selectedDate)&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DetailScreen(&#10;    dataType: DataType,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // 获取数据管理器实例&#10;    // 生成模拟详细数据&#10;    val deviceData by deviceDataManager.deviceData.collectAsStateWithLifecycle()&#10;&#10;    var selectedDate by remember { mutableStateOf(LocalDate.now()) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;&#10;    // 生成模拟详细数据&#10;    val detailData = remember(selectedDate, dataType) {&#10;        generateDetailData(dataType, selectedDate)&#10;    }&#10;&#10;    // 计算今日概览&#10;    val dailySummary = remember(detailData) {&#10;        calculateDailySummary(detailData)&#10;    }&#10;&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(scrollState)&#10;            .padding(16.dp)&#10;    ) {&#10;        // 顶部导航栏&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(&#10;                onClick = onBackClick,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;返回&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;${dataType.title}详情&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 日期选择器&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showDatePicker = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;选择日期: ${selectedDate.format(DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;))}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = &quot;选择日期&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 当前数据显示&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(20.dp),&#10;                horizontalAlignment = Alignment.Start&#10;            ) {&#10;                Text(&#10;                    text = when (dataType) {&#10;                        DataType.TEMPERATURE -&gt; &quot;${deviceData.temperature.toInt()}${dataType.unit}&quot;&#10;                        DataType.HUMIDITY -&gt; &quot;${deviceData.humidity.toInt()}${dataType.unit}&quot;&#10;                        DataType.FOOD -&gt; &quot;${deviceData.foodAmount.toInt()}${dataType.unit}&quot;&#10;                        DataType.WATER -&gt; &quot;${deviceData.waterAmount.toInt()}${dataType.unit}&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.displayMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = dataType.color&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;更新时间: ${deviceData.lastUpdateTime}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 折线图&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;24小时趋势图&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                DetailChart(&#10;                    data = detailData,&#10;                    lineColor = dataType.color,&#10;                    unit = dataType.unit,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 今日概览&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;今日概览&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                ) {&#10;                    SummaryItem(&#10;                        label = &quot;最高&quot;,&#10;                        value = &quot;${dailySummary.maxValue.toInt()}${dataType.unit}&quot;,&#10;                        time = dailySummary.maxTime,&#10;                        color = Color(0xFFE57373)&#10;                    )&#10;&#10;                    SummaryItem(&#10;                        label = &quot;最低&quot;,&#10;                        value = &quot;${dailySummary.minValue.toInt()}${dataType.unit}&quot;,&#10;                        time = dailySummary.minTime,&#10;                        color = Color(0xFF64B5F6)&#10;                    )&#10;&#10;                    SummaryItem(&#10;                        label = &quot;平均&quot;,&#10;                        value = &quot;${dailySummary.avgValue.toInt()}${dataType.unit}&quot;,&#10;                        time = &quot;全天&quot;,&#10;                        color = Color(0xFF81C784)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // 日期选择器弹窗&#10;    if (showDatePicker) {&#10;        CustomDatePickerDialog(&#10;            onDateSelected = { date -&gt;&#10;                selectedDate = date&#10;                showDatePicker = false&#10;            },&#10;            onDismiss = { showDatePicker = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SummaryItem(&#10;    label: String,&#10;    value: String,&#10;    time: String,&#10;    color: Color&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .clip(CircleShape)&#10;                .background(color)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;        )&#10;&#10;        Text(&#10;            text = time,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DetailChart(&#10;    data: List&lt;DetailDataPoint&gt;,&#10;    lineColor: Color,&#10;    unit: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val textColor = MaterialTheme.colorScheme.onSurface&#10;&#10;    Canvas(modifier = modifier) {&#10;        if (data.isEmpty()) return@Canvas&#10;&#10;        val width = size.width&#10;        val height = size.height&#10;        val padding = 32.dp.toPx()&#10;&#10;        // 计算数据范围&#10;        val minValue = data.minOf { it.value }&#10;        val maxValue = data.maxOf { it.value }&#10;        val valueRange = if (maxValue &gt; minValue) maxValue - minValue else 1f&#10;&#10;        // 计算图表区域&#10;        val chartWidth = width - 2 * padding&#10;        val chartHeight = height - 2 * padding&#10;&#10;        // 创建路径&#10;        val path = Path()&#10;&#10;        data.forEachIndexed { index, point -&gt;&#10;            val x = padding + chartWidth * (point.hour + point.minute / 60f) / 24f&#10;            val y = padding + chartHeight * (1 - (point.value - minValue) / valueRange)&#10;&#10;            if (index == 0) {&#10;                path.moveTo(x, y)&#10;            } else {&#10;                path.lineTo(x, y)&#10;            }&#10;        }&#10;&#10;        // 绘制网格线&#10;        drawIntoCanvas { canvas -&gt;&#10;            val gridPaint = android.graphics.Paint().apply {&#10;                color = Color.Gray.copy(alpha = 0.3f).toArgb()&#10;                strokeWidth = 1.dp.toPx()&#10;            }&#10;&#10;            // 垂直网格线 (时间)&#10;            for (hour in 0..24 step 6) {&#10;                val x = padding + chartWidth * hour / 24f&#10;                canvas.nativeCanvas.drawLine(x, padding, x, height - padding, gridPaint)&#10;            }&#10;&#10;            // 水平网格线 (数值)&#10;            for (i in 0..4) {&#10;                val y = padding + chartHeight * i / 4f&#10;                canvas.nativeCanvas.drawLine(padding, y, width - padding, y, gridPaint)&#10;            }&#10;        }&#10;&#10;        // 绘制曲线&#10;        drawPath(&#10;            path = path,&#10;            color = lineColor,&#10;            style = Stroke(&#10;                width = 2.dp.toPx(),&#10;                cap = StrokeCap.Round,&#10;                join = StrokeJoin.Round&#10;            )&#10;        )&#10;&#10;        // 绘制数据点&#10;        data.forEach { point -&gt;&#10;            val x = padding + chartWidth * (point.hour + point.minute / 60f) / 24f&#10;            val y = padding + chartHeight * (1 - (point.value - minValue) / valueRange)&#10;&#10;            drawCircle(&#10;                color = lineColor,&#10;                radius = 3.dp.toPx(),&#10;                center = Offset(x, y)&#10;            )&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;        }&#10;&#10;        // 绘制坐标轴标签&#10;        drawIntoCanvas { canvas -&gt;&#10;            val textPaint = android.graphics.Paint().apply {&#10;                color = textColor.toArgb()&#10;                textSize = 10.sp.toPx()&#10;                isAntiAlias = true&#10;            }&#10;&#10;            // X轴时间标签&#10;            for (hour in 0..24 step 6) {&#10;                val x = padding + chartWidth * hour / 24f&#10;                val y = height - 8.dp.toPx()&#10;                textPaint.textAlign = android.graphics.Paint.Align.CENTER&#10;                canvas.nativeCanvas.drawText(&quot;${hour}:00&quot;, x, y, textPaint)&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;            }&#10;&#10;            // Y轴数值标签&#10;            for (i in 0..4) {&#10;                val value = minValue + (maxValue - minValue) * (4 - i) / 4f&#10;                val x = 8.dp.toPx()&#10;                val y = padding + chartHeight * i / 4f + 4.dp.toPx()&#10;                textPaint.textAlign = android.graphics.Paint.Align.LEFT&#10;                canvas.nativeCanvas.drawText(&quot;${value.toInt()}$unit&quot;, x, y, textPaint)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;fun CustomDatePickerDialog(&#10;    onDateSelected: (LocalDate) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val datePickerState = rememberDatePickerState()&#10;&#10;    DatePickerDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                        val date = java.time.Instant.ofEpochMilli(millis)&#10;                            .atZone(java.time.ZoneId.systemDefault())&#10;                            .toLocalDate()&#10;                        onDateSelected(date)&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;确定&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;取消&quot;)&#10;            }&#10;        }&#10;    ) {&#10;        DatePicker(state = datePickerState)&#10;    }&#10;}&#10;&#10;// 生成模拟详细数据&#10;fun generateDetailData(dataType: DataType, date: LocalDate): List&lt;DetailDataPoint&gt; {&#10;    val data = mutableListOf&lt;DetailDataPoint&gt;()&#10;&#10;    for (hour in 0..23) {&#10;        for (minute in 0 until 60 step 15) { // 每15分钟一个数据点&#10;            val baseValue = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; 20f + 8f * sin((hour - 6) * Math.PI / 12).toFloat()&#10;                DataType.HUMIDITY -&gt; 60f + 15f * sin((hour - 3) * Math.PI / 12).toFloat()&#10;                DataType.FOOD -&gt; if (hour % 8 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 8) * 60f - minute * 1f)&#10;                DataType.WATER -&gt; if (hour % 6 == 0 &amp;&amp; minute == 0) 500f else maxOf(0f, 500f - (hour % 6) * 80f - minute * 1.5f)&#10;            }&#10;&#10;            val noise = Random.nextFloat() * 6f - 3f // ±3的随机噪声&#10;            val value = when (dataType) {&#10;                DataType.TEMPERATURE -&gt; (baseValue + noise).coerceIn(15f, 35f)&#10;                DataType.HUMIDITY -&gt; (baseValue + noise).coerceIn(40f, 85f)&#10;                DataType.FOOD -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;                DataType.WATER -&gt; (baseValue + noise).coerceIn(0f, 500f)&#10;            }&#10;&#10;            data.add(&#10;                DetailDataPoint(&#10;                    hour = hour,&#10;                    minute = minute,&#10;                    value = value,&#10;                    timestamp = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    return data&#10;}&#10;&#10;// 计算今日概览&#10;fun calculateDailySummary(data: List&lt;DetailDataPoint&gt;): DailySummary {&#10;    if (data.isEmpty()) {&#10;        return DailySummary(0f, 0f, 0f, &quot;&quot;, &quot;&quot;)&#10;    }&#10;&#10;    val maxPoint = data.maxByOrNull { it.value }!!&#10;    val minPoint = data.minByOrNull { it.value }!!&#10;    val avgValue = data.map { it.value }.average().toFloat()&#10;&#10;    return DailySummary(&#10;        maxValue = maxPoint.value,&#10;        minValue = minPoint.value,&#10;        avgValue = avgValue,&#10;        maxTime = maxPoint.timestamp,&#10;        minTime = minPoint.timestamp&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.screens&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Path&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.graphics.StrokeJoin&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.graphics.drawscope.drawIntoCanvas&#10;import androidx.compose.ui.graphics.nativeCanvas&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.petnestiq.data.DeviceDataManager&#10;import com.example.petnestiq.data.DataType&#10;import com.example.petnestiq.data.MockDataGenerator&#10;import com.example.petnestiq.data.DetailDataPoint&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;&#10;// 今日概览数据&#10;data class DailySummary(&#10;    val maxValue: Float,&#10;    val minValue: Float,&#10;    val avgValue: Float,&#10;    val maxTime: String,&#10;    val minTime: String&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DetailScreen(&#10;    dataType: DataType,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    // 获取数据管理器实例&#10;    val deviceDataManager = remember { DeviceDataManager.getInstance() }&#10;    val deviceData by deviceDataManager.deviceData.collectAsStateWithLifecycle()&#10;&#10;    var selectedDate by remember { mutableStateOf(LocalDate.now()) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;&#10;    // 使用统一的模拟数据生成器&#10;    val detailData = remember(selectedDate, dataType) {&#10;        MockDataGenerator.generateDetailData(dataType, selectedDate)&#10;    }&#10;&#10;    // 计算今日概览&#10;    val dailySummary = remember(detailData) {&#10;        calculateDailySummary(detailData)&#10;    }&#10;&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(scrollState)&#10;            .padding(16.dp)&#10;    ) {&#10;        // 顶部导航栏&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(&#10;                onClick = onBackClick,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;返回&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;${dataType.title}详情&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 日期选择器&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showDatePicker = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;选择日期: ${selectedDate.format(DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;))}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = &quot;选择日期&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 当前数据显示&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.background&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(20.dp),&#10;                horizontalAlignment = Alignment.Start&#10;            ) {&#10;                Text(&#10;                    text = when (dataType) {&#10;                        DataType.TEMPERATURE -&gt; &quot;${deviceData.temperature.toInt()}${dataType.unit}&quot;&#10;                        DataType.HUMIDITY -&gt; &quot;${deviceData.humidity.toInt()}${dataType.unit}&quot;&#10;                        DataType.FOOD -&gt; &quot;${deviceData.foodAmount.toInt()}${dataType.unit}&quot;&#10;                        DataType.WATER -&gt; &quot;${deviceData.waterAmount.toInt()}${dataType.unit}&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.displayMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = dataType.color&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;更新时间: ${deviceData.lastUpdateTime}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onBackground&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 折线图&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;24小时趋势图&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSurface,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                DetailChart(&#10;                    data = detailData,&#10;                    lineColor = dataType.color,&#10;                    unit = dataType.unit,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 今日概览&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;今日概览&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                ) {&#10;                    SummaryItem(&#10;                        label = &quot;最高&quot;,&#10;                        value = &quot;${dailySummary.maxValue.toInt()}${dataType.unit}&quot;,&#10;                        time = dailySummary.maxTime,&#10;                        color = Color(0xFFE57373)&#10;                    )&#10;&#10;                    SummaryItem(&#10;                        label = &quot;最低&quot;,&#10;                        value = &quot;${dailySummary.minValue.toInt()}${dataType.unit}&quot;,&#10;                        time = dailySummary.minTime,&#10;                        color = Color(0xFF64B5F6)&#10;                    )&#10;&#10;                    SummaryItem(&#10;                        label = &quot;平均&quot;,&#10;                        value = &quot;${dailySummary.avgValue.toInt()}${dataType.unit}&quot;,&#10;                        time = &quot;全天&quot;,&#10;                        color = Color(0xFF81C784)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // 日期选择器弹窗&#10;    if (showDatePicker) {&#10;        CustomDatePickerDialog(&#10;            onDateSelected = { date -&gt;&#10;                selectedDate = date&#10;                showDatePicker = false&#10;            },&#10;            onDismiss = { showDatePicker = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SummaryItem(&#10;    label: String,&#10;    value: String,&#10;    time: String,&#10;    color: Color&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .clip(CircleShape)&#10;                .background(color)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;        )&#10;&#10;        Text(&#10;            text = time,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DetailChart(&#10;    data: List&lt;DetailDataPoint&gt;,&#10;    lineColor: Color,&#10;    unit: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val textColor = MaterialTheme.colorScheme.onSurface&#10;&#10;    Canvas(modifier = modifier) {&#10;        if (data.isEmpty()) return@Canvas&#10;&#10;        val width = size.width&#10;        val height = size.height&#10;        val padding = 32.dp.toPx()&#10;&#10;        // 计算数据范围&#10;        val minValue = data.minOf { it.value }&#10;        val maxValue = data.maxOf { it.value }&#10;        val valueRange = if (maxValue &gt; minValue) maxValue - minValue else 1f&#10;&#10;        // 计算图表区域&#10;        val chartWidth = width - 2 * padding&#10;        val chartHeight = height - 2 * padding&#10;&#10;        // 创建路径&#10;        val path = Path()&#10;&#10;        data.forEachIndexed { index, point -&gt;&#10;            val x = padding + chartWidth * (point.hour + point.minute / 60f) / 24f&#10;            val y = padding + chartHeight * (1 - (point.value - minValue) / valueRange)&#10;&#10;            if (index == 0) {&#10;                path.moveTo(x, y)&#10;            } else {&#10;                path.lineTo(x, y)&#10;            }&#10;        }&#10;&#10;        // 绘制网格线&#10;        drawIntoCanvas { canvas -&gt;&#10;            val gridPaint = android.graphics.Paint().apply {&#10;                color = Color.Gray.copy(alpha = 0.3f).toArgb()&#10;                strokeWidth = 1.dp.toPx()&#10;            }&#10;&#10;            // 垂直网格线 (时间)&#10;            for (hour in 0..24 step 6) {&#10;                val x = padding + chartWidth * hour / 24f&#10;                canvas.nativeCanvas.drawLine(x, padding, x, height - padding, gridPaint)&#10;            }&#10;&#10;            // 水平网格线 (数值)&#10;            for (i in 0..4) {&#10;                val y = padding + chartHeight * i / 4f&#10;                canvas.nativeCanvas.drawLine(padding, y, width - padding, y, gridPaint)&#10;            }&#10;        }&#10;&#10;        // 绘制曲线&#10;        drawPath(&#10;            path = path,&#10;            color = lineColor,&#10;            style = Stroke(&#10;                width = 2.dp.toPx(),&#10;                cap = StrokeCap.Round,&#10;                join = StrokeJoin.Round&#10;            )&#10;        )&#10;&#10;        // 绘制数据点&#10;        data.forEach { point -&gt;&#10;            val x = padding + chartWidth * (point.hour + point.minute / 60f) / 24f&#10;            val y = padding + chartHeight * (1 - (point.value - minValue) / valueRange)&#10;&#10;            drawCircle(&#10;                color = lineColor,&#10;                radius = 3.dp.toPx(),&#10;                center = Offset(x, y)&#10;            )&#10;        }&#10;&#10;        // 绘制坐标轴标签&#10;        drawIntoCanvas { canvas -&gt;&#10;            val textPaint = android.graphics.Paint().apply {&#10;                color = textColor.toArgb()&#10;                textSize = 10.sp.toPx()&#10;                isAntiAlias = true&#10;            }&#10;&#10;            // X轴时间标签&#10;            for (hour in 0..24 step 6) {&#10;                val x = padding + chartWidth * hour / 24f&#10;                val y = height - 8.dp.toPx()&#10;                textPaint.textAlign = android.graphics.Paint.Align.CENTER&#10;                canvas.nativeCanvas.drawText(&quot;${hour}:00&quot;, x, y, textPaint)&#10;            }&#10;&#10;            // Y轴数值标签&#10;            for (i in 0..4) {&#10;                val value = minValue + (maxValue - minValue) * (4 - i) / 4f&#10;                val x = 8.dp.toPx()&#10;                val y = padding + chartHeight * i / 4f + 4.dp.toPx()&#10;                textPaint.textAlign = android.graphics.Paint.Align.LEFT&#10;                canvas.nativeCanvas.drawText(&quot;${value.toInt()}$unit&quot;, x, y, textPaint)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CustomDatePickerDialog(&#10;    onDateSelected: (LocalDate) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val datePickerState = rememberDatePickerState()&#10;&#10;    DatePickerDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                        val date = java.time.Instant.ofEpochMilli(millis)&#10;                            .atZone(java.time.ZoneId.systemDefault())&#10;                            .toLocalDate()&#10;                        onDateSelected(date)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;确定&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;取消&quot;)&#10;            }&#10;        }&#10;    ) {&#10;        DatePicker(state = datePickerState)&#10;    }&#10;}&#10;&#10;// 计算今日概览&#10;fun calculateDailySummary(data: List&lt;DetailDataPoint&gt;): DailySummary {&#10;    if (data.isEmpty()) {&#10;        return DailySummary(0f, 0f, 0f, &quot;&quot;, &quot;&quot;)&#10;    }&#10;&#10;    val maxPoint = data.maxByOrNull { it.value }!!&#10;    val minPoint = data.minByOrNull { it.value }!!&#10;    val avgValue = data.map { it.value }.average().toFloat()&#10;&#10;    return DailySummary(&#10;        maxValue = maxPoint.value,&#10;        minValue = minPoint.value,&#10;        avgValue = avgValue,&#10;        maxTime = maxPoint.timestamp,&#10;        minTime = minPoint.timestamp&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/OtherScreens.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/OtherScreens.kt" />
              <option name="originalContent" value="package com.example.petnestiq.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.petnestiq.R&#10;import com.example.petnestiq.data.Message&#10;import com.example.petnestiq.data.MessageType&#10;import com.example.petnestiq.data.MessagePriority&#10;import com.example.petnestiq.data.DeviceDataManager&#10;import com.example.petnestiq.service.MessageManager&#10;import com.example.petnestiq.service.HuaweiIoTDAMqttService&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessageScreen(navController: NavController? = null) {&#10;    val context = LocalContext.current&#10;    val messageManager = remember { MessageManager.getInstance(context) }&#10;    val messages by messageManager.messages.collectAsStateWithLifecycle()&#10;    val unreadCount by messageManager.unreadCount.collectAsStateWithLifecycle()&#10;&#10;    var selectedTab by remember { mutableStateOf(0) }&#10;    val tabs = listOf(&quot;全部&quot;, &quot;设备消息&quot;, &quot;报警消息&quot;)&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            // 标题栏&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;消息中心&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Row {&#10;                    // 未读消息计数&#10;                    if (unreadCount &gt; 0) {&#10;                        Badge(&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        ) {&#10;                            Text(text = unreadCount.toString())&#10;                        }&#10;                    }&#10;&#10;                    // 全部已读按钮&#10;                    if (unreadCount &gt; 0) {&#10;                        IconButton(&#10;                            onClick = { messageManager.markAllAsRead() }&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.DoneAll,&#10;                                contentDescription = &quot;全部已读&quot;,&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // 选项卡&#10;            TabRow(&#10;                selectedTabIndex = selectedTab,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                tabs.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTab == index,&#10;                        onClick = { selectedTab = index },&#10;                        text = { Text(title) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // 消息列表&#10;            val filteredMessages = when (selectedTab) {&#10;                1 -&gt; messages.filter { it.type == MessageType.DEVICE }&#10;                2 -&gt; messages.filter { it.type == MessageType.ALARM }&#10;                else -&gt; messages&#10;            }&#10;&#10;            if (filteredMessages.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Info,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;暂无消息&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(filteredMessages) { message -&gt;&#10;                        MessageItem(&#10;                            message = message,&#10;                            onMessageClick = {&#10;                                if (!message.isRead) {&#10;                                    messageManager.markAsRead(message.id)&#10;                                }&#10;                            },&#10;                            onDeleteClick = {&#10;                                messageManager.deleteMessage(message.id)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // AI助手悬浮球&#10;        FloatingActionButton(&#10;            onClick = {&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.AiChat.route)&#10;            },&#10;            modifier = Modifier&#10;                .align(Alignment.BottomStart)&#10;                .padding(16.dp)&#10;                .size(56.dp),&#10;            containerColor = MaterialTheme.colorScheme.primary,&#10;            elevation = FloatingActionButtonDefaults.elevation(&#10;                defaultElevation = 6.dp,&#10;                pressedElevation = 12.dp&#10;            )&#10;        ) {&#10;            Icon(&#10;                Icons.Default.SmartToy,&#10;                contentDescription = &quot;AI助手&quot;,&#10;                tint = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageItem(&#10;    message: Message,&#10;    onMessageClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onMessageClick() },&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (message.isRead)&#10;                MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#10;            else&#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // 消息图标&#10;            Icon(&#10;                imageVector = when (message.type) {&#10;                    MessageType.DEVICE -&gt; Icons.Default.Info&#10;                    MessageType.ALARM -&gt; Icons.Default.Warning&#10;                },&#10;                contentDescription = null,&#10;                tint = when (message.type) {&#10;                    MessageType.DEVICE -&gt; MaterialTheme.colorScheme.primary&#10;                    MessageType.ALARM -&gt; Color(0xFFFF5722)&#10;                },&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // 消息内容&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = message.title,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = if (message.isRead) FontWeight.Normal else FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;&#10;                    // 优先级指示器&#10;                    if (message.priority != MessagePriority.NORMAL) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(8.dp)&#10;                                .clip(CircleShape)&#10;                                .background(&#10;                                    when (message.priority) {&#10;                                        MessagePriority.LOW -&gt; Color.Gray&#10;                                        MessagePriority.HIGH -&gt; Color(0xFFFF9800)&#10;                                        MessagePriority.URGENT -&gt; Color(0xFFF44336)&#10;                                        else -&gt; Color.Transparent&#10;                                    }&#10;                                )&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = message.content,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(&#10;                        alpha = if (message.isRead) 0.7f else 1f&#10;                    ),&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = message.getFormattedTime(),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;                    )&#10;&#10;                    Text(&#10;                        text = message.getTypeDisplayName(),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontSize = 10.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            // 删除按钮&#10;            IconButton(&#10;                onClick = onDeleteClick,&#10;                modifier = Modifier.size(24.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Delete,&#10;                    contentDescription = &quot;删除&quot;,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ControlScreen() {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;控制&quot;,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DataScreen() {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;数据&quot;,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileScreen(navController: androidx.navigation.NavController? = null) {&#10;    val context = LocalContext.current&#10;    val userInfoManager = remember { com.example.petnestiq.data.UserInfoManager.getInstance(context) }&#10;    val userInfo by userInfoManager.userInfo.collectAsStateWithLifecycle()&#10;    var showDebugOptions by remember { mutableStateOf(false) }&#10;    var showAboutDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;我的&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.padding(bottom = 24.dp)&#10;        )&#10;&#10;        // 用户信息卡片&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable {&#10;                    navController?.navigate(com.example.petnestiq.navigation.NavigationItem.UserProfileEdit.route)&#10;                },&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(20.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // 左侧头像 - 智能显示逻辑&#10;                when {&#10;                    userInfo.savedAvatarPath != null -&gt; {&#10;                        // 显示保存到应用内的头像文件&#10;                        AsyncImage(&#10;                            model = java.io.File(userInfo.savedAvatarPath),&#10;                            contentDescription = &quot;用户头像&quot;,&#10;                            modifier = Modifier&#10;                                .size(60.dp)&#10;                                .clip(CircleShape)&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#10;                            contentScale = ContentScale.Crop,&#10;                            error = painterResource(id = userInfo.avatarResourceId) // 如果文件损坏则显示默认头像&#10;                        )&#10;                    }&#10;                    userInfo.avatarUri != null -&gt; {&#10;                        // 显示URI头像（可能无效）&#10;                        AsyncImage(&#10;                            model = userInfo.avatarUri,&#10;                            contentDescription = &quot;用户头像&quot;,&#10;                            modifier = Modifier&#10;                                .size(60.dp)&#10;                                .clip(CircleShape)&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#10;                            contentScale = ContentScale.Crop,&#10;                            error = painterResource(id = userInfo.avatarResourceId) // 如果URI无效则显示默认头像&#10;                        )&#10;                    }&#10;                    else -&gt; {&#10;                        // 显示默认资源头像&#10;                        Image(&#10;                            painter = painterResource(id = userInfo.avatarResourceId),&#10;                            contentDescription = &quot;用户头像&quot;,&#10;                            modifier = Modifier&#10;                                .size(60.dp)&#10;                                .clip(CircleShape)&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                // 右侧用户信息&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = userInfo.nickname,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = userInfoManager.getPetInfoDisplay(),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;&#10;                // 右侧箭头图标&#10;                Icon(&#10;                    Icons.Default.KeyboardArrowRight,&#10;                    contentDescription = &quot;编辑&quot;,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // 功能列表&#10;        ProfileMenuItem(&#10;            title = &quot;设备管理&quot;,&#10;            subtitle = &quot;管理您的智能宠物窝设备&quot;,&#10;            onClick = {&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.DeviceManagement.route)&#10;            }&#10;        )&#10;&#10;        ProfileMenuItem(&#10;            title = &quot;设置中心&quot;,&#10;            subtitle = &quot;个人设置和系统偏好&quot;,&#10;            onClick = { /* TODO: 跳转到设置 */ }&#10;        )&#10;&#10;        ProfileMenuItem(&#10;            title = &quot;调试选项&quot;,&#10;            subtitle = &quot;开发者调试和测试功能&quot;,&#10;            onClick = { showDebugOptions = true }&#10;        )&#10;&#10;        ProfileMenuItem(&#10;            title = &quot;帮助与反馈&quot;,&#10;            subtitle = &quot;使用帮助和问题反馈&quot;,&#10;            onClick = { /* TODO: 跳转到帮助 */ }&#10;        )&#10;&#10;        ProfileMenuItem(&#10;            title = &quot;关于应用&quot;,&#10;            subtitle = &quot;应用版本和开发信息&quot;,&#10;            onClick = { showAboutDialog = true }&#10;        )&#10;&#10;        // 调试选项对话框&#10;        if (showDebugOptions) {&#10;            DebugOptionsDialog(&#10;                onDismiss = { showDebugOptions = false }&#10;            )&#10;        }&#10;&#10;        // 关于应用对话框&#10;        if (showAboutDialog) {&#10;            AboutDialog(&#10;                onDismiss = { showAboutDialog = false }&#10;            )&#10;        }&#10;&#10;        // 版权信息&#10;        Spacer(modifier = Modifier.weight(1f)) // 推送到底部&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;@超小韓 版权所有&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray,&#10;                fontSize = 11.sp&#10;            )&#10;&#10;            Text(&#10;                text = &quot;当前仅为测试版（v3.0.0），实时监控功能尚未实现&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray,&#10;                fontSize = 11.sp,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 2.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;若使用中有任何问题，请邮箱提交至chaoxiaohan@chaoxiaohan.cyou&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray,&#10;                fontSize = 11.sp,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 2.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileMenuItem(&#10;    title: String,&#10;    subtitle: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onClick() },&#10;        shape = RoundedCornerShape(8.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = subtitle,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DebugOptionsDialog(&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var selectedDebugTab by remember { mutableStateOf(0) }&#10;    val debugTabs = listOf(&quot;消息测试&quot;, &quot;系统调试&quot;, &quot;网络测试&quot;)&#10;&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .fillMaxHeight(0.8f),&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                // 标题栏&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;调试选项&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            Icons.Default.Close,&#10;                            contentDescription = &quot;关闭&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // 调试选项卡&#10;                TabRow(&#10;                    selectedTabIndex = selectedDebugTab,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    debugTabs.forEachIndexed { index, title -&gt;&#10;                        Tab(&#10;                            selected = selectedDebugTab == index,&#10;                            onClick = { selectedDebugTab = index },&#10;                            text = { Text(title) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // 调试内容&#10;                when (selectedDebugTab) {&#10;                    0 -&gt; MessageTestPanel()&#10;                    1 -&gt; SystemDebugPanel()&#10;                    2 -&gt; NetworkTestPanel()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessageTestPanel() {&#10;    val context = LocalContext.current&#10;    val messageManager = remember { MessageManager.getInstance(context) }&#10;&#10;    var selectedMessageType by remember { mutableStateOf(MessageType.DEVICE) }&#10;    var messageContent by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedPriority by remember { mutableStateOf(MessagePriority.NORMAL) }&#10;    var showSuccessMessage by remember { mutableStateOf(false) }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item {&#10;            Text(&#10;                text = &quot;消息测试板块&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;&#10;        item {&#10;            // 消息类型选择&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;消息类型&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        FilterChip(&#10;                            selected = selectedMessageType == MessageType.DEVICE,&#10;                            onClick = { selectedMessageType = MessageType.DEVICE },&#10;                            label = { Text(&quot;设备消息&quot;) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    Icons.Default.Info,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        )&#10;&#10;                        FilterChip(&#10;                            selected = selectedMessageType == MessageType.ALARM,&#10;                            onClick = { selectedMessageType = MessageType.ALARM },&#10;                            label = { Text(&quot;报警消息&quot;) },&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    Icons.Default.Warning,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item {&#10;            // 优先级选择&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;消息优先级&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        MessagePriority.values().forEach { priority -&gt;&#10;                            FilterChip(&#10;                                selected = selectedPriority == priority,&#10;                                onClick = { selectedPriority = priority },&#10;                                label = {&#10;                                    Text(&#10;                                        text = when (priority) {&#10;                                            MessagePriority.LOW -&gt; &quot;低&quot;&#10;                                            MessagePriority.NORMAL -&gt; &quot;普通&quot;&#10;                                            MessagePriority.HIGH -&gt; &quot;高&quot;&#10;                                            MessagePriority.URGENT -&gt; &quot;紧急&quot;&#10;                                        },&#10;                                        fontSize = 12.sp&#10;                                    )&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item {&#10;            // 消息内容输入&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;消息内容&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = messageContent,&#10;                        onValueChange = { messageContent = it },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        placeholder = { Text(&quot;请输入要发送的消息内容...&quot;) },&#10;                        minLines = 3,&#10;                        maxLines = 5&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        item {&#10;            // 快速消息模板&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;快速模板&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val templates = if (selectedMessageType == MessageType.DEVICE) {&#10;                        listOf(&#10;                            &quot;设备连接成功&quot;,&#10;                            &quot;��度异常，当前温度：30°C&quot;,&#10;                            &quot;食物余量不足，剩余：50g&quot;,&#10;                            &quot;系统更新完成&quot;&#10;                        )&#10;                    } else {&#10;                        listOf(&#10;                            &quot;紧急停机！设备出现故障&quot;,&#10;                            &quot;高温报警！当前温度：45°C&quot;,&#10;                            &quot;安全报警：设备门未关闭&quot;,&#10;                            &quot;火灾报警！检测到异常高温&quot;&#10;                        )&#10;                    }&#10;&#10;                    Column(&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        templates.forEach { template -&gt;&#10;                            TextButton(&#10;                                onClick = { messageContent = template },&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = template,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item {&#10;            // 发送按钮&#10;            Button(&#10;                onClick = {&#10;                    if (messageContent.isNotBlank()) {&#10;                        messageManager.sendTestMessage(&#10;                            type = selectedMessageType,&#10;                            content = messageContent,&#10;                            priority = selectedPriority,&#10;                            context = context&#10;                        )&#10;                        showSuccessMessage = true&#10;                        messageContent = &quot;&quot;&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = messageContent.isNotBlank()&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Send,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;发送测试消息&quot;)&#10;            }&#10;        }&#10;&#10;        // 成功提示&#10;        if (showSuccessMessage) {&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color(0xFF4CAF50).copy(alpha = 0.1f)&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = &quot;✓ 测试消息发送成功！请查看消息界面和系统通知。&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Color(0xFF4CAF50),&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;&#10;                LaunchedEffect(Unit) {&#10;                    kotlinx.coroutines.delay(3000)&#10;                    showSuccessMessage = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SystemDebugPanel() {&#10;    val context = LocalContext.current&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item {&#10;            Text(&#10;                text = &quot;系统调试&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;应用信息&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;版本: 1.1.0&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    Text(&quot;构建: Debug&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    Text(&quot;设备: Android&quot;, style = MaterialTheme.typography.bodySmall)&#10;                }&#10;            }&#10;        }&#10;&#10;        item {&#10;            Button(&#10;                onClick = {&#10;                    MessageManager.getInstance(context).clearAllMessages()&#10;                },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;清空所有消息&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NetworkTestPanel() {&#10;    val mqttService = remember { HuaweiIoTDAMqttService.getInstance() }&#10;    val deviceDataManager = remember { DeviceDataManager.getInstance() }&#10;&#10;    // 收集MQTT调试数据&#10;    val debugMessages by mqttService.debugMessages.collectAsStateWithLifecycle()&#10;    val lastReceivedData by mqttService.lastReceivedData.collectAsStateWithLifecycle()&#10;    val lastSentCommand by mqttService.lastSentCommand.collectAsStateWithLifecycle()&#10;    val connectionStatus by deviceDataManager.connectionStatus.collectAsStateWithLifecycle()&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;网络调试&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Row {&#10;                    // 清除日志按钮&#10;                    IconButton(&#10;                        onClick = { mqttService.clearDebugMessages() },&#10;                        modifier = Modifier.size(32.dp)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Clear,&#10;                            contentDescription = &quot;清除日志&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;&#10;                    // 刷新按钮&#10;                    IconButton(&#10;                        onClick = { mqttService.getDeviceShadow() },&#10;                        modifier = Modifier.size(32.dp)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Refresh,&#10;                            contentDescription = &quot;刷新数据&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // MQTT连接状态&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp)&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;MQTT连接状态&quot;,&#10;                            style = MaterialTheme.typography.titleSmall,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                        // 状态指示器&#10;                        val indicatorColor = when (connectionStatus) {&#10;                            &quot;MQTT连接&quot; -&gt; Color(0xFF4CAF50)&#10;                            &quot;连接中...&quot; -&gt; Color(0xFFFF9800)&#10;                            &quot;连接失败&quot;, &quot;连接断开&quot; -&gt; Color(0xFFF44336)&#10;                            else -&gt; Color(0xFF9E9E9E)&#10;                        }&#10;&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(10.dp)&#10;                                .background(&#10;                                    color = indicatorColor,&#10;                                    shape = RoundedCornerShape(5.dp)&#10;                                )&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                    Text(&#10;                        text = &quot;状态: ${connectionStatus ?: &quot;未连接&quot;}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;&#10;                    mqttService.getMqttConfig()?.let { config -&gt;&#10;                        Text(&#10;                            text = &quot;设备ID: ${config.deviceId}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;服务器: ${config.serverUri}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = &quot;连接状态: ${if (mqttService.isConnected()) &quot;已连接&quot; else &quot;未连接&quot;}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = if (mqttService.isConnected()) Color(0xFF4CAF50) else Color(0xFFF44336)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // 最后接收的数据&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;最后接收的数据&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                    lastReceivedData?.let { data -&gt;&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = data,&#10;                                modifier = Modifier.padding(8.dp),&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = MaterialTheme.colorScheme.onSurface,&#10;                                fontSize = 10.sp&#10;                            )&#10;                        }&#10;                    } ?: run {&#10;                        Text(&#10;                            text = &quot;暂无数据&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // 最后发送的指令&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;最后发送的指令&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                    lastSentCommand?.let { commandText -&gt;&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = commandText,&#10;                                modifier = Modifier.padding(8.dp),&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = MaterialTheme.colorScheme.onSurface,&#10;                                fontSize = 10.sp&#10;                            )&#10;                        }&#10;                    } ?: run {&#10;                        Text(&#10;                            text = &quot;暂无指令&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // 调试日志&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;调试日志 (${debugMessages.size}条)&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                    if (debugMessages.isNotEmpty()) {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(200.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = Color.Black&#10;                            )&#10;                        ) {&#10;                            LazyColumn(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(8.dp),&#10;                                reverseLayout = false&#10;                            ) {&#10;                                items(debugMessages) { message -&gt;&#10;                                    Text(&#10;                                        text = message,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color.Green,&#10;                                        fontSize = 9.sp,&#10;                                        modifier = Modifier.padding(vertical = 1.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Text(&#10;                            text = &quot;暂无调试日志&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // 网络测试按钮&#10;        item {&#10;            Button(&#10;                onClick = { mqttService.getDeviceShadow() },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;手动获取设备数据&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AboutDialog(&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .wrapContentHeight(),&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // 应用图标&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.cat),&#10;                    contentDescription = &quot;应用图标&quot;,&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(16.dp)),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // 应用名称&#10;                Text(&#10;                    text = &quot;PetNestIQ&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;智能宠物窝管理系统&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // 版本信息卡片&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;版本 3.0.0&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;构建日期：2025年8月9日&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // 开发者信息卡片&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;开发者&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;超小韓&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // 应用简介&#10;                Text(&#10;                    text = &quot;PetNestIQ 是一款专业的智能宠物窝管理应用，提供实时监控、智能报警、远程控制等功能，让您随时随地关注爱宠的生活状态。&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 20.sp&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // 版权信息&#10;                Text(&#10;                    text = &quot;© 2025 超小韓\n保留所有权利&quot;,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // 关闭按钮&#10;                Button(&#10;                    onClick = onDismiss,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(48.dp),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;关闭&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.Image&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.border&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.shape.CircleShape&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.graphics.vector.ImageVector&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.platform.LocalContext&#13;&#10;import androidx.compose.ui.res.painterResource&#13;&#10;import androidx.compose.ui.text.font.FontFamily&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.compose.ui.window.Dialog&#13;&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#13;&#10;import androidx.navigation.NavController&#13;&#10;import coil.compose.AsyncImage&#13;&#10;import com.example.petnestiq.R&#13;&#10;import com.example.petnestiq.data.Message&#13;&#10;import com.example.petnestiq.data.MessageType&#13;&#10;import com.example.petnestiq.data.MessagePriority&#13;&#10;import com.example.petnestiq.data.DeviceDataManager&#13;&#10;import com.example.petnestiq.service.MessageManager&#13;&#10;import com.example.petnestiq.service.HuaweiIoTDAMqttService&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun MessageScreen(navController: NavController? = null) {&#13;&#10;    val context = LocalContext.current&#13;&#10;    val messageManager = remember { MessageManager.getInstance(context) }&#13;&#10;    val messages by messageManager.messages.collectAsStateWithLifecycle()&#13;&#10;    val unreadCount by messageManager.unreadCount.collectAsStateWithLifecycle()&#13;&#10;&#13;&#10;    var selectedTab by remember { mutableStateOf(0) }&#13;&#10;    val tabs = listOf(&quot;全部&quot;, &quot;设备消息&quot;, &quot;报警消息&quot;)&#13;&#10;&#13;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(16.dp)&#13;&#10;        ) {&#13;&#10;            // 标题栏&#13;&#10;            Row(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = &quot;消息中心&quot;,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    fontWeight = FontWeight.Bold,&#13;&#10;                    color = MaterialTheme.colorScheme.primary&#13;&#10;                )&#13;&#10;&#13;&#10;                Row {&#13;&#10;                    // 未读消息计数&#13;&#10;                    if (unreadCount &gt; 0) {&#13;&#10;                        Badge(&#13;&#10;                            modifier = Modifier.padding(end = 8.dp)&#13;&#10;                        ) {&#13;&#10;                            Text(text = unreadCount.toString())&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // 全部已读按钮&#13;&#10;                    if (unreadCount &gt; 0) {&#13;&#10;                        IconButton(&#13;&#10;                            onClick = { messageManager.markAllAsRead() }&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                Icons.Default.DoneAll,&#13;&#10;                                contentDescription = &quot;全部已读&quot;,&#13;&#10;                                tint = MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;            // 选项卡&#13;&#10;            TabRow(&#13;&#10;                selectedTabIndex = selectedTab,&#13;&#10;                modifier = Modifier.fillMaxWidth()&#13;&#10;            ) {&#13;&#10;                tabs.forEachIndexed { index, title -&gt;&#13;&#10;                    Tab(&#13;&#10;                        selected = selectedTab == index,&#13;&#10;                        onClick = { selectedTab = index },&#13;&#10;                        text = { Text(title) }&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;            // 消息列表&#13;&#10;            val filteredMessages = when (selectedTab) {&#13;&#10;                1 -&gt; messages.filter { it.type == MessageType.DEVICE }&#13;&#10;                2 -&gt; messages.filter { it.type == MessageType.ALARM }&#13;&#10;                else -&gt; messages&#13;&#10;            }&#13;&#10;&#13;&#10;            if (filteredMessages.isEmpty()) {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            Icons.Default.Info,&#13;&#10;                            contentDescription = null,&#13;&#10;                            modifier = Modifier.size(64.dp),&#13;&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                        Text(&#13;&#10;                            text = &quot;暂无消息&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodyLarge,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } else {&#13;&#10;                LazyColumn(&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                ) {&#13;&#10;                    items(filteredMessages) { message -&gt;&#13;&#10;                        MessageItem(&#13;&#10;                            message = message,&#13;&#10;                            onMessageClick = {&#13;&#10;                                if (!message.isRead) {&#13;&#10;                                    messageManager.markAsRead(message.id)&#13;&#10;                                }&#13;&#10;                            },&#13;&#10;                            onDeleteClick = {&#13;&#10;                                messageManager.deleteMessage(message.id)&#13;&#10;                            }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // AI助手悬浮球&#13;&#10;        FloatingActionButton(&#13;&#10;            onClick = {&#13;&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.AiChat.route)&#13;&#10;            },&#13;&#10;            modifier = Modifier&#13;&#10;                .align(Alignment.BottomStart)&#13;&#10;                .padding(16.dp)&#13;&#10;                .size(56.dp),&#13;&#10;            containerColor = MaterialTheme.colorScheme.primary,&#13;&#10;            elevation = FloatingActionButtonDefaults.elevation(&#13;&#10;                defaultElevation = 6.dp,&#13;&#10;                pressedElevation = 12.dp&#13;&#10;            )&#13;&#10;        ) {&#13;&#10;            Icon(&#13;&#10;                Icons.Default.SmartToy,&#13;&#10;                contentDescription = &quot;AI助手&quot;,&#13;&#10;                tint = MaterialTheme.colorScheme.onPrimary,&#13;&#10;                modifier = Modifier.size(24.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun MessageItem(&#13;&#10;    message: Message,&#13;&#10;    onMessageClick: () -&gt; Unit,&#13;&#10;    onDeleteClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .clickable { onMessageClick() },&#13;&#10;        shape = RoundedCornerShape(12.dp),&#13;&#10;        colors = CardDefaults.cardColors(&#13;&#10;            containerColor = if (message.isRead)&#13;&#10;                MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)&#13;&#10;            else&#13;&#10;                MaterialTheme.colorScheme.surfaceVariant&#13;&#10;        ),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;    ) {&#13;&#10;        Row(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(16.dp),&#13;&#10;            horizontalArrangement = Arrangement.SpaceBetween&#13;&#10;        ) {&#13;&#10;            // 消息图标&#13;&#10;            Icon(&#13;&#10;                imageVector = when (message.type) {&#13;&#10;                    MessageType.DEVICE -&gt; Icons.Default.Info&#13;&#10;                    MessageType.ALARM -&gt; Icons.Default.Warning&#13;&#10;                },&#13;&#10;                contentDescription = null,&#13;&#10;                tint = when (message.type) {&#13;&#10;                    MessageType.DEVICE -&gt; MaterialTheme.colorScheme.primary&#13;&#10;                    MessageType.ALARM -&gt; Color(0xFFFF5722)&#13;&#10;                },&#13;&#10;                modifier = Modifier.size(24.dp)&#13;&#10;            )&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.width(12.dp))&#13;&#10;&#13;&#10;            // 消息内容&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.weight(1f)&#13;&#10;            ) {&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = message.title,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = if (message.isRead) FontWeight.Normal else FontWeight.Bold,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;&#13;&#10;                    // 优先级指示器&#13;&#10;                    if (message.priority != MessagePriority.NORMAL) {&#13;&#10;                        Box(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .size(8.dp)&#13;&#10;                                .clip(CircleShape)&#13;&#10;                                .background(&#13;&#10;                                    when (message.priority) {&#13;&#10;                                        MessagePriority.LOW -&gt; Color.Gray&#13;&#10;                                        MessagePriority.HIGH -&gt; Color(0xFFFF9800)&#13;&#10;                                        MessagePriority.URGENT -&gt; Color(0xFFF44336)&#13;&#10;                                        else -&gt; Color.Transparent&#13;&#10;                                    }&#13;&#10;                                )&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(4.dp))&#13;&#10;&#13;&#10;                Text(&#13;&#10;                    text = message.content,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(&#13;&#10;                        alpha = if (message.isRead) 0.7f else 1f&#13;&#10;                    ),&#13;&#10;                    maxLines = 2,&#13;&#10;                    overflow = TextOverflow.Ellipsis&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = message.getFormattedTime(),&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = message.getTypeDisplayName(),&#13;&#10;                        style = MaterialTheme.typography.labelSmall,&#13;&#10;                        color = MaterialTheme.colorScheme.primary,&#13;&#10;                        fontSize = 10.sp&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.width(8.dp))&#13;&#10;&#13;&#10;            // 删除按钮&#13;&#10;            IconButton(&#13;&#10;                onClick = onDeleteClick,&#13;&#10;                modifier = Modifier.size(24.dp)&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    Icons.Default.Delete,&#13;&#10;                    contentDescription = &quot;删除&quot;,&#13;&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#13;&#10;                    modifier = Modifier.size(18.dp)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun ControlScreen() {&#13;&#10;    Box(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp),&#13;&#10;        contentAlignment = Alignment.Center&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = &quot;控制&quot;,&#13;&#10;            style = MaterialTheme.typography.headlineLarge,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            color = MaterialTheme.colorScheme.primary&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun DataScreen() {&#13;&#10;    Box(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp),&#13;&#10;        contentAlignment = Alignment.Center&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = &quot;数据&quot;,&#13;&#10;            style = MaterialTheme.typography.headlineLarge,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            color = MaterialTheme.colorScheme.primary&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun ProfileScreen(navController: androidx.navigation.NavController? = null) {&#13;&#10;    val context = LocalContext.current&#13;&#10;    val userInfoManager = remember { com.example.petnestiq.data.UserInfoManager.getInstance(context) }&#13;&#10;    val userInfo by userInfoManager.userInfo.collectAsStateWithLifecycle()&#13;&#10;    var showDebugOptions by remember { mutableStateOf(false) }&#13;&#10;    var showAboutDialog by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp)&#13;&#10;    ) {&#13;&#10;        Text(&#13;&#10;            text = &quot;我的&quot;,&#13;&#10;            style = MaterialTheme.typography.headlineSmall,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            color = MaterialTheme.colorScheme.primary,&#13;&#10;            modifier = Modifier.padding(bottom = 24.dp)&#13;&#10;        )&#13;&#10;&#13;&#10;        // 用户信息卡片&#13;&#10;        Card(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .clickable {&#13;&#10;                    navController?.navigate(com.example.petnestiq.navigation.NavigationItem.UserProfileEdit.route)&#13;&#10;                },&#13;&#10;            shape = RoundedCornerShape(16.dp),&#13;&#10;            colors = CardDefaults.cardColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;            ),&#13;&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;        ) {&#13;&#10;            Row(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .padding(20.dp),&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                // 左侧头像 - 智能显示逻辑&#13;&#10;                when {&#13;&#10;                    userInfo.savedAvatarPath != null -&gt; {&#13;&#10;                        // 显示保存到应用内的头像文件&#13;&#10;                        AsyncImage(&#13;&#10;                            model = java.io.File(userInfo.savedAvatarPath),&#13;&#10;                            contentDescription = &quot;用户头像&quot;,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .size(60.dp)&#13;&#10;                                .clip(CircleShape)&#13;&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#13;&#10;                            contentScale = ContentScale.Crop,&#13;&#10;                            error = painterResource(id = userInfo.avatarResourceId) // 如果文件损坏则显示默认头像&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    userInfo.avatarUri != null -&gt; {&#13;&#10;                        // 显示URI头像（可能无效）&#13;&#10;                        AsyncImage(&#13;&#10;                            model = userInfo.avatarUri,&#13;&#10;                            contentDescription = &quot;用户头像&quot;,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .size(60.dp)&#13;&#10;                                .clip(CircleShape)&#13;&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#13;&#10;                            contentScale = ContentScale.Crop,&#13;&#10;                            error = painterResource(id = userInfo.avatarResourceId) // 如果URI无效则显示默认头像&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                    else -&gt; {&#13;&#10;                        // 显示默认资源头像&#13;&#10;                        Image(&#13;&#10;                            painter = painterResource(id = userInfo.avatarResourceId),&#13;&#10;                            contentDescription = &quot;用户头像&quot;,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .size(60.dp)&#13;&#10;                                .clip(CircleShape)&#13;&#10;                                .border(2.dp, MaterialTheme.colorScheme.primary, CircleShape),&#13;&#10;                            contentScale = ContentScale.Crop&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.width(16.dp))&#13;&#10;&#13;&#10;                // 右侧用户信息&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.weight(1f)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = userInfo.nickname,&#13;&#10;                        style = MaterialTheme.typography.titleLarge,&#13;&#10;                        fontWeight = FontWeight.Bold,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.height(4.dp))&#13;&#10;                    Text(&#13;&#10;                        text = userInfoManager.getPetInfoDisplay(),&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                // 右侧箭头图标&#13;&#10;                Icon(&#13;&#10;                    Icons.Default.KeyboardArrowRight,&#13;&#10;                    contentDescription = &quot;编辑&quot;,&#13;&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;        // 功能列表&#13;&#10;        ProfileMenuItem(&#13;&#10;            title = &quot;设备管理&quot;,&#13;&#10;            subtitle = &quot;管理您的智能宠物窝设备&quot;,&#13;&#10;            onClick = {&#13;&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.DeviceManagement.route)&#13;&#10;            }&#13;&#10;        )&#13;&#10;&#13;&#10;        ProfileMenuItem(&#13;&#10;            title = &quot;设置中心&quot;,&#13;&#10;            subtitle = &quot;个人设置和系统偏好&quot;,&#13;&#10;            onClick = { &#13;&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.SettingsCenter.route)&#13;&#10;            }&#13;&#10;        )&#13;&#10;&#13;&#10;        ProfileMenuItem(&#13;&#10;            title = &quot;调试选项&quot;,&#13;&#10;            subtitle = &quot;开发者调试和测试功能&quot;,&#13;&#10;            onClick = { showDebugOptions = true }&#13;&#10;        )&#13;&#10;&#13;&#10;        ProfileMenuItem(&#13;&#10;            title = &quot;帮助与反馈&quot;,&#13;&#10;            subtitle = &quot;使用帮助和问题反馈&quot;,&#13;&#10;            onClick = { &#13;&#10;                navController?.navigate(com.example.petnestiq.navigation.NavigationItem.UsageFeedback.route)&#13;&#10;            }&#13;&#10;        )&#13;&#10;&#13;&#10;        // 调试选项对话框&#13;&#10;        if (showDebugOptions) {&#13;&#10;            DebugOptionsDialog(&#13;&#10;                onDismiss = { showDebugOptions = false }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // 关于应用对话框&#13;&#10;        if (showAboutDialog) {&#13;&#10;            AboutDialog(&#13;&#10;                onDismiss = { showAboutDialog = false }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // 版权信息&#13;&#10;        Spacer(modifier = Modifier.weight(1f)) // 推送到底部&#13;&#10;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(vertical = 16.dp),&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = &quot;@超小韓 版权所有&quot;,&#13;&#10;                style = MaterialTheme.typography.bodySmall,&#13;&#10;                color = Color.Gray,&#13;&#10;                fontSize = 11.sp&#13;&#10;            )&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = &quot;当前仅为测试版（v3.0.0），实时监控功能尚未实现&quot;,&#13;&#10;                style = MaterialTheme.typography.bodySmall,&#13;&#10;                color = Color.Gray,&#13;&#10;                fontSize = 11.sp,&#13;&#10;                textAlign = TextAlign.Center,&#13;&#10;                modifier = Modifier.padding(top = 2.dp)&#13;&#10;            )&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = &quot;若使用中有任何问题，请邮箱提交至chaoxiaohan@chaoxiaohan.cyou&quot;,&#13;&#10;                style = MaterialTheme.typography.bodySmall,&#13;&#10;                color = Color.Gray,&#13;&#10;                fontSize = 11.sp,&#13;&#10;                textAlign = TextAlign.Center,&#13;&#10;                modifier = Modifier.padding(top = 2.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun ProfileMenuItem(&#13;&#10;    title: String,&#13;&#10;    subtitle: String,&#13;&#10;    onClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .padding(vertical = 4.dp)&#13;&#10;            .clickable { onClick() },&#13;&#10;        shape = RoundedCornerShape(8.dp),&#13;&#10;        colors = CardDefaults.cardColors(&#13;&#10;            containerColor = MaterialTheme.colorScheme.surface&#13;&#10;        ),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(16.dp)&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = title,&#13;&#10;                style = MaterialTheme.typography.titleSmall,&#13;&#10;                fontWeight = FontWeight.Medium,&#13;&#10;                color = MaterialTheme.colorScheme.onSurface&#13;&#10;            )&#13;&#10;            Spacer(modifier = Modifier.height(4.dp))&#13;&#10;            Text(&#13;&#10;                text = subtitle,&#13;&#10;                style = MaterialTheme.typography.bodySmall,&#13;&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun DebugOptionsDialog(&#13;&#10;    onDismiss: () -&gt; Unit&#13;&#10;) {&#13;&#10;    var selectedDebugTab by remember { mutableStateOf(0) }&#13;&#10;    val debugTabs = listOf(&quot;消息测试&quot;, &quot;系统调试&quot;, &quot;网络测试&quot;)&#13;&#10;&#13;&#10;    Dialog(onDismissRequest = onDismiss) {&#13;&#10;        Card(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .fillMaxHeight(0.8f),&#13;&#10;            shape = RoundedCornerShape(16.dp),&#13;&#10;            colors = CardDefaults.cardColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.surface&#13;&#10;            )&#13;&#10;        ) {&#13;&#10;            Column(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxSize()&#13;&#10;                    .padding(16.dp)&#13;&#10;            ) {&#13;&#10;                // 标题栏&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;调试选项&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleLarge,&#13;&#10;                        fontWeight = FontWeight.Bold,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurface&#13;&#10;                    )&#13;&#10;&#13;&#10;                    IconButton(onClick = onDismiss) {&#13;&#10;                        Icon(&#13;&#10;                            Icons.Default.Close,&#13;&#10;                            contentDescription = &quot;关闭&quot;,&#13;&#10;                            tint = MaterialTheme.colorScheme.onSurface&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // 调试选项卡&#13;&#10;                TabRow(&#13;&#10;                    selectedTabIndex = selectedDebugTab,&#13;&#10;                    modifier = Modifier.fillMaxWidth()&#13;&#10;                ) {&#13;&#10;                    debugTabs.forEachIndexed { index, title -&gt;&#13;&#10;                        Tab(&#13;&#10;                            selected = selectedDebugTab == index,&#13;&#10;                            onClick = { selectedDebugTab = index },&#13;&#10;                            text = { Text(title) }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // 调试内容&#13;&#10;                when (selectedDebugTab) {&#13;&#10;                    0 -&gt; MessageTestPanel()&#13;&#10;                    1 -&gt; SystemDebugPanel()&#13;&#10;                    2 -&gt; NetworkTestPanel()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun MessageTestPanel() {&#13;&#10;    val context = LocalContext.current&#13;&#10;    val messageManager = remember { MessageManager.getInstance(context) }&#13;&#10;&#13;&#10;    var selectedMessageType by remember { mutableStateOf(MessageType.DEVICE) }&#13;&#10;    var messageContent by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var selectedPriority by remember { mutableStateOf(MessagePriority.NORMAL) }&#13;&#10;    var showSuccessMessage by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    LazyColumn(&#13;&#10;        modifier = Modifier.fillMaxSize(),&#13;&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;    ) {&#13;&#10;        item {&#13;&#10;            Text(&#13;&#10;                text = &quot;消息测试板块&quot;,&#13;&#10;                style = MaterialTheme.typography.titleMedium,&#13;&#10;                fontWeight = FontWeight.Bold,&#13;&#10;                color = MaterialTheme.colorScheme.primary&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            // 消息类型选择&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;消息类型&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        horizontalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                    ) {&#13;&#10;                        FilterChip(&#13;&#10;                            selected = selectedMessageType == MessageType.DEVICE,&#13;&#10;                            onClick = { selectedMessageType = MessageType.DEVICE },&#13;&#10;                            label = { Text(&quot;设备消息&quot;) },&#13;&#10;                            leadingIcon = {&#13;&#10;                                Icon(&#13;&#10;                                    Icons.Default.Info,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    modifier = Modifier.size(16.dp)&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        )&#13;&#10;&#13;&#10;                        FilterChip(&#13;&#10;                            selected = selectedMessageType == MessageType.ALARM,&#13;&#10;                            onClick = { selectedMessageType = MessageType.ALARM },&#13;&#10;                            label = { Text(&quot;报警消息&quot;) },&#13;&#10;                            leadingIcon = {&#13;&#10;                                Icon(&#13;&#10;                                    Icons.Default.Warning,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    modifier = Modifier.size(16.dp)&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            // 优先级选择&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;消息优先级&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                    ) {&#13;&#10;                        MessagePriority.values().forEach { priority -&gt;&#13;&#10;                            FilterChip(&#13;&#10;                                selected = selectedPriority == priority,&#13;&#10;                                onClick = { selectedPriority = priority },&#13;&#10;                                label = {&#13;&#10;                                    Text(&#13;&#10;                                        text = when (priority) {&#13;&#10;                                            MessagePriority.LOW -&gt; &quot;低&quot;&#13;&#10;                                            MessagePriority.NORMAL -&gt; &quot;普通&quot;&#13;&#10;                                            MessagePriority.HIGH -&gt; &quot;高&quot;&#13;&#10;                                            MessagePriority.URGENT -&gt; &quot;紧急&quot;&#13;&#10;                                        },&#13;&#10;                                        fontSize = 12.sp&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            // 消息内容输入&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;消息内容&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = messageContent,&#13;&#10;                        onValueChange = { messageContent = it },&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        placeholder = { Text(&quot;请输入要发送的消息内容...&quot;) },&#13;&#10;                        minLines = 3,&#13;&#10;                        maxLines = 5&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            // 快速消息模板&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;快速模板&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    val templates = if (selectedMessageType == MessageType.DEVICE) {&#13;&#10;                        listOf(&#13;&#10;                            &quot;设备连接成功&quot;,&#13;&#10;                            &quot;��度异常，当前温度：30°C&quot;,&#13;&#10;                            &quot;食物余量不足，剩余：50g&quot;,&#13;&#10;                            &quot;系统更新完成&quot;&#13;&#10;                        )&#13;&#10;                    } else {&#13;&#10;                        listOf(&#13;&#10;                            &quot;紧急停机！设备出现故障&quot;,&#13;&#10;                            &quot;高温报警！当前温度：45°C&quot;,&#13;&#10;                            &quot;安全报警：设备门未关闭&quot;,&#13;&#10;                            &quot;火灾报警！检测到异常高温&quot;&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Column(&#13;&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#13;&#10;                    ) {&#13;&#10;                        templates.forEach { template -&gt;&#13;&#10;                            TextButton(&#13;&#10;                                onClick = { messageContent = template },&#13;&#10;                                modifier = Modifier.fillMaxWidth()&#13;&#10;                            ) {&#13;&#10;                                Text(&#13;&#10;                                    text = template,&#13;&#10;                                    style = MaterialTheme.typography.bodySmall,&#13;&#10;                                    modifier = Modifier.fillMaxWidth()&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            // 发送按钮&#13;&#10;            Button(&#13;&#10;                onClick = {&#13;&#10;                    if (messageContent.isNotBlank()) {&#13;&#10;                        messageManager.sendTestMessage(&#13;&#10;                            type = selectedMessageType,&#13;&#10;                            content = messageContent,&#13;&#10;                            priority = selectedPriority,&#13;&#10;                            context = context&#13;&#10;                        )&#13;&#10;                        showSuccessMessage = true&#13;&#10;                        messageContent = &quot;&quot;&#13;&#10;                    }&#13;&#10;                },&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                enabled = messageContent.isNotBlank()&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    Icons.Default.Send,&#13;&#10;                    contentDescription = null,&#13;&#10;                    modifier = Modifier.size(18.dp)&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                Text(&quot;发送测试消息&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 成功提示&#13;&#10;        if (showSuccessMessage) {&#13;&#10;            item {&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = Color(0xFF4CAF50).copy(alpha = 0.1f)&#13;&#10;                    )&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;✓ 测试消息发送成功！请查看消息界面和系统通知。&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        color = Color(0xFF4CAF50),&#13;&#10;                        modifier = Modifier.padding(16.dp)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                LaunchedEffect(Unit) {&#13;&#10;                    kotlinx.coroutines.delay(3000)&#13;&#10;                    showSuccessMessage = false&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun SystemDebugPanel() {&#13;&#10;    val context = LocalContext.current&#13;&#10;&#13;&#10;    LazyColumn(&#13;&#10;        modifier = Modifier.fillMaxSize(),&#13;&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;    ) {&#13;&#10;        item {&#13;&#10;            Text(&#13;&#10;                text = &quot;系统调试&quot;,&#13;&#10;                style = MaterialTheme.typography.titleMedium,&#13;&#10;                fontWeight = FontWeight.Bold,&#13;&#10;                color = MaterialTheme.colorScheme.primary&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;应用信息&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                    Text(&quot;版本: 1.1.0&quot;, style = MaterialTheme.typography.bodySmall)&#13;&#10;                    Text(&quot;构建: Debug&quot;, style = MaterialTheme.typography.bodySmall)&#13;&#10;                    Text(&quot;设备: Android&quot;, style = MaterialTheme.typography.bodySmall)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        item {&#13;&#10;            Button(&#13;&#10;                onClick = {&#13;&#10;                    MessageManager.getInstance(context).clearAllMessages()&#13;&#10;                },&#13;&#10;                modifier = Modifier.fillMaxWidth()&#13;&#10;            ) {&#13;&#10;                Text(&quot;清空所有消息&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun NetworkTestPanel() {&#13;&#10;    val mqttService = remember { HuaweiIoTDAMqttService.getInstance() }&#13;&#10;    val deviceDataManager = remember { DeviceDataManager.getInstance() }&#13;&#10;&#13;&#10;    // 收集MQTT调试数据&#13;&#10;    val debugMessages by mqttService.debugMessages.collectAsStateWithLifecycle()&#13;&#10;    val lastReceivedData by mqttService.lastReceivedData.collectAsStateWithLifecycle()&#13;&#10;    val lastSentCommand by mqttService.lastSentCommand.collectAsStateWithLifecycle()&#13;&#10;    val connectionStatus by deviceDataManager.connectionStatus.collectAsStateWithLifecycle()&#13;&#10;&#13;&#10;    LazyColumn(&#13;&#10;        modifier = Modifier.fillMaxSize(),&#13;&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;    ) {&#13;&#10;        item {&#13;&#10;            Row(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = &quot;网络调试&quot;,&#13;&#10;                    style = MaterialTheme.typography.titleMedium,&#13;&#10;                    fontWeight = FontWeight.Bold,&#13;&#10;                    color = MaterialTheme.colorScheme.primary&#13;&#10;                )&#13;&#10;&#13;&#10;                Row {&#13;&#10;                    // 清除日志按钮&#13;&#10;                    IconButton(&#13;&#10;                        onClick = { mqttService.clearDebugMessages() },&#13;&#10;                        modifier = Modifier.size(32.dp)&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            Icons.Default.Clear,&#13;&#10;                            contentDescription = &quot;清除日志&quot;,&#13;&#10;                            tint = MaterialTheme.colorScheme.onSurface,&#13;&#10;                            modifier = Modifier.size(18.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // 刷新按钮&#13;&#10;                    IconButton(&#13;&#10;                        onClick = { mqttService.getDeviceShadow() },&#13;&#10;                        modifier = Modifier.size(32.dp)&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            Icons.Default.Refresh,&#13;&#10;                            contentDescription = &quot;刷新数据&quot;,&#13;&#10;                            tint = MaterialTheme.colorScheme.onSurface,&#13;&#10;                            modifier = Modifier.size(18.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // MQTT连接状态&#13;&#10;        item {&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(12.dp)&#13;&#10;                ) {&#13;&#10;                    Row(&#13;&#10;                        verticalAlignment = Alignment.CenterVertically&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;MQTT连接状态&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleSmall,&#13;&#10;                            fontWeight = FontWeight.Medium,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;                        )&#13;&#10;&#13;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#13;&#10;&#13;&#10;                        // 状态指示器&#13;&#10;                        val indicatorColor = when (connectionStatus) {&#13;&#10;                            &quot;MQTT连接&quot; -&gt; Color(0xFF4CAF50)&#13;&#10;                            &quot;连接中...&quot; -&gt; Color(0xFFFF9800)&#13;&#10;                            &quot;连接失败&quot;, &quot;连接断开&quot; -&gt; Color(0xFFF44336)&#13;&#10;                            else -&gt; Color(0xFF9E9E9E)&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Box(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .size(10.dp)&#13;&#10;                                .background(&#13;&#10;                                    color = indicatorColor,&#13;&#10;                                    shape = RoundedCornerShape(5.dp)&#13;&#10;                                )&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = &quot;状态: ${connectionStatus ?: &quot;未连接&quot;}&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;                    )&#13;&#10;&#13;&#10;                    mqttService.getMqttConfig()?.let { config -&gt;&#13;&#10;                        Text(&#13;&#10;                            text = &quot;设备ID: ${config.deviceId}&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#13;&#10;                        )&#13;&#10;                        Text(&#13;&#10;                            text = &quot;服务器: ${config.serverUri}&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = &quot;连接状态: ${if (mqttService.isConnected()) &quot;已连接&quot; else &quot;未连接&quot;}&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        fontWeight = FontWeight.Medium,&#13;&#10;                        color = if (mqttService.isConnected()) Color(0xFF4CAF50) else Color(0xFFF44336)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 最后接收的数据&#13;&#10;        item {&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;最后接收的数据&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium,&#13;&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#13;&#10;&#13;&#10;                    lastReceivedData?.let { data -&gt;&#13;&#10;                        Card(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            colors = CardDefaults.cardColors(&#13;&#10;                                containerColor = MaterialTheme.colorScheme.surface&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = data,&#13;&#10;                                modifier = Modifier.padding(8.dp),&#13;&#10;                                style = MaterialTheme.typography.bodySmall,&#13;&#10;                                fontFamily = FontFamily.Monospace,&#13;&#10;                                color = MaterialTheme.colorScheme.onSurface,&#13;&#10;                                fontSize = 10.sp&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    } ?: run {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;暂无数据&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 最后发送的指令&#13;&#10;        item {&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;最后发送的指令&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium,&#13;&#10;                        color = MaterialTheme.colorScheme.onTertiaryContainer&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#13;&#10;&#13;&#10;                    lastSentCommand?.let { commandText -&gt;&#13;&#10;                        Card(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            colors = CardDefaults.cardColors(&#13;&#10;                                containerColor = MaterialTheme.colorScheme.surface&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = commandText,&#13;&#10;                                modifier = Modifier.padding(8.dp),&#13;&#10;                                style = MaterialTheme.typography.bodySmall,&#13;&#10;                                fontFamily = FontFamily.Monospace,&#13;&#10;                                color = MaterialTheme.colorScheme.onSurface,&#13;&#10;                                fontSize = 10.sp&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    } ?: run {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;暂无指令&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 调试日志&#13;&#10;        item {&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;调试日志 (${debugMessages.size}条)&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Medium,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(6.dp))&#13;&#10;&#13;&#10;                    if (debugMessages.isNotEmpty()) {&#13;&#10;                        Card(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .height(200.dp),&#13;&#10;                            colors = CardDefaults.cardColors(&#13;&#10;                                containerColor = Color.Black&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            LazyColumn(&#13;&#10;                                modifier = Modifier&#13;&#10;                                    .fillMaxSize()&#13;&#10;                                    .padding(8.dp),&#13;&#10;                                reverseLayout = false&#13;&#10;                            ) {&#13;&#10;                                items(debugMessages) { message -&gt;&#13;&#10;                                    Text(&#13;&#10;                                        text = message,&#13;&#10;                                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                                        fontFamily = FontFamily.Monospace,&#13;&#10;                                        color = Color.Green,&#13;&#10;                                        fontSize = 9.sp,&#13;&#10;                                        modifier = Modifier.padding(vertical = 1.dp)&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;暂无调试日志&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 网络测试按钮&#13;&#10;        item {&#13;&#10;            Button(&#13;&#10;                onClick = { mqttService.getDeviceShadow() },&#13;&#10;                modifier = Modifier.fillMaxWidth()&#13;&#10;            ) {&#13;&#10;                Text(&quot;手动获取设备数据&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun AboutDialog(&#13;&#10;    onDismiss: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Dialog(onDismissRequest = onDismiss) {&#13;&#10;        Card(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .wrapContentHeight(),&#13;&#10;            shape = RoundedCornerShape(16.dp),&#13;&#10;            colors = CardDefaults.cardColors(&#13;&#10;                containerColor = MaterialTheme.colorScheme.surface&#13;&#10;            ),&#13;&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#13;&#10;        ) {&#13;&#10;            Column(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .padding(24.dp),&#13;&#10;                horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;            ) {&#13;&#10;                // 应用图标&#13;&#10;                Image(&#13;&#10;                    painter = painterResource(id = R.drawable.cat),&#13;&#10;                    contentDescription = &quot;应用图标&quot;,&#13;&#10;                    modifier = Modifier&#13;&#10;                        .size(80.dp)&#13;&#10;                        .clip(RoundedCornerShape(16.dp)),&#13;&#10;                    contentScale = ContentScale.Crop&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // 应用名称&#13;&#10;                Text(&#13;&#10;                    text = &quot;PetNestIQ&quot;,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    fontWeight = FontWeight.Bold,&#13;&#10;                    color = MaterialTheme.colorScheme.primary,&#13;&#10;                    textAlign = TextAlign.Center&#13;&#10;                )&#13;&#10;&#13;&#10;                Text(&#13;&#10;                    text = &quot;智能宠物窝管理系统&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                    textAlign = TextAlign.Center&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;                // 版本信息卡片&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)&#13;&#10;                    ),&#13;&#10;                    shape = RoundedCornerShape(12.dp)&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(16.dp),&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;版本 3.0.0&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleMedium,&#13;&#10;                            fontWeight = FontWeight.Medium,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;                        )&#13;&#10;&#13;&#10;                        Text(&#13;&#10;                            text = &quot;构建日期：2025年8月9日&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // 开发者信息卡片&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#13;&#10;                    ),&#13;&#10;                    shape = RoundedCornerShape(12.dp)&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(16.dp),&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;开发者&quot;,&#13;&#10;                            style = MaterialTheme.typography.labelMedium,&#13;&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.7f)&#13;&#10;                        )&#13;&#10;&#13;&#10;                        Text(&#13;&#10;                            text = &quot;超小韓&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleLarge,&#13;&#10;                            fontWeight = FontWeight.Bold,&#13;&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // 应用简介&#13;&#10;                Text(&#13;&#10;                    text = &quot;PetNestIQ 是一款专业的智能宠物窝管理应用，提供实时监控、智能报警、远程控制等功能，让您随时随地关注爱宠的生活状态。&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodySmall,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                    textAlign = TextAlign.Center,&#13;&#10;                    lineHeight = 20.sp&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;                // 版权信息&#13;&#10;                Text(&#13;&#10;                    text = &quot;© 2025 超小韓\n保留所有权利&quot;,&#13;&#10;                    style = MaterialTheme.typography.labelSmall,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),&#13;&#10;                    textAlign = TextAlign.Center&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;                // 关闭按钮&#13;&#10;                Button(&#13;&#10;                    onClick = onDismiss,&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .height(48.dp),&#13;&#10;                    shape = RoundedCornerShape(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;关闭&quot;,&#13;&#10;                        style = MaterialTheme.typography.titleMedium,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/UsageFeedbackScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/screens/UsageFeedbackScreen.kt" />
              <option name="updatedContent" value="package com.example.petnestiq.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun UsageFeedbackScreen(&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    var feedbackText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedFeedbackType by remember { mutableStateOf(&quot;功能建议&quot;) }&#10;    var showSubmitDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.background)&#10;    ) {&#10;        // 顶部标题栏&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;使用与反馈&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;返回&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item { Spacer(modifier = Modifier.height(8.dp)) }&#10;&#10;            // 使用帮助部分&#10;            item {&#10;                FeedbackSection(title = &quot;使用帮助&quot;) {&#10;                    HelpItem(&#10;                        icon = Icons.Default.DeviceHub,&#10;                        title = &quot;设备连接&quot;,&#10;                        description = &quot;如何连接和配置智能宠物窝设备&quot;,&#10;                        onClick = { /* TODO: 打开帮助详情 */ }&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(start = 56.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    HelpItem(&#10;                        icon = Icons.Default.Notifications,&#10;                        title = &quot;通知设置&quot;,&#10;                        description = &quot;如何设置和管理设备通知&quot;,&#10;                        onClick = { /* TODO: 打开帮助详情 */ }&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(start = 56.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    HelpItem(&#10;                        icon = Icons.Default.DataUsage,&#10;                        title = &quot;数据查看&quot;,&#10;                        description = &quot;如何查看和分析宠物数据&quot;,&#10;                        onClick = { /* TODO: 打开帮助详情 */ }&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(start = 56.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    HelpItem(&#10;                        icon = Icons.Default.SmartToy,&#10;                        title = &quot;AI助手&quot;,&#10;                        description = &quot;如何使用AI助手功能&quot;,&#10;                        onClick = { /* TODO: 打开帮助详情 */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // 常见问题部分&#10;            item {&#10;                FeedbackSection(title = &quot;常见问题&quot;) {&#10;                    FAQItem(&#10;                        question = &quot;设备无法连接网络怎么办？&quot;,&#10;                        answer = &quot;请检查网络设置，确保设备在WiFi覆盖范围内，并重启设备重试&quot;&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(vertical = 8.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    FAQItem(&#10;                        question = &quot;数据显示不准确怎么办？&quot;,&#10;                        answer = &quot;请确保传感器清洁，设备放置位置合适，必要时可以重新校准设备&quot;&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(vertical = 8.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    FAQItem(&#10;                        question = &quot;如何设置自动喂食？&quot;,&#10;                        answer = &quot;在设备管理页面中找到自动喂食选项，设置喂食时间和分量即可&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            // 意见反馈部分&#10;            item {&#10;                FeedbackSection(title = &quot;意见反馈&quot;) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        // 反馈类型选择&#10;                        Text(&#10;                            text = &quot;反馈类型&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        &#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            FeedbackTypeChip(&#10;                                text = &quot;功能建议&quot;,&#10;                                selected = selectedFeedbackType == &quot;功能建议&quot;,&#10;                                onClick = { selectedFeedbackType = &quot;功能建议&quot; }&#10;                            )&#10;                            FeedbackTypeChip(&#10;                                text = &quot;问题反馈&quot;,&#10;                                selected = selectedFeedbackType == &quot;问题反馈&quot;,&#10;                                onClick = { selectedFeedbackType = &quot;问题反馈&quot; }&#10;                            )&#10;                            FeedbackTypeChip(&#10;                                text = &quot;其他&quot;,&#10;                                selected = selectedFeedbackType == &quot;其他&quot;,&#10;                                onClick = { selectedFeedbackType = &quot;其他&quot; }&#10;                            )&#10;                        }&#10;                        &#10;                        // 反馈内容输入&#10;                        Text(&#10;                            text = &quot;反馈内容&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        &#10;                        OutlinedTextField(&#10;                            value = feedbackText,&#10;                            onValueChange = { feedbackText = it },&#10;                            placeholder = { Text(&quot;请详细描述您的意见或建议...&quot;) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(120.dp),&#10;                            maxLines = 5&#10;                        )&#10;                        &#10;                        // 提交按钮&#10;                        Button(&#10;                            onClick = { showSubmitDialog = true },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            enabled = feedbackText.isNotBlank()&#10;                        ) {&#10;                            Text(&quot;提交反馈&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 联系我们部分&#10;            item {&#10;                FeedbackSection(title = &quot;联系我们&quot;) {&#10;                    ContactItem(&#10;                        icon = Icons.Default.Email,&#10;                        title = &quot;邮箱联系&quot;,&#10;                        content = &quot;support@petnestiq.com&quot;,&#10;                        onClick = { /* TODO: 打开邮箱应用 */ }&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(start = 56.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    ContactItem(&#10;                        icon = Icons.Default.Phone,&#10;                        title = &quot;客服热线&quot;,&#10;                        content = &quot;400-123-4567&quot;,&#10;                        onClick = { /* TODO: 拨打电话 */ }&#10;                    )&#10;                    &#10;                    Divider(&#10;                        modifier = Modifier.padding(start = 56.dp),&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f)&#10;                    )&#10;                    &#10;                    ContactItem(&#10;                        icon = Icons.Default.Forum,&#10;                        title = &quot;在线客服&quot;,&#10;                        content = &quot;工作日 9:00-18:00&quot;,&#10;                        onClick = { /* TODO: 打开客服对话 */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            item { Spacer(modifier = Modifier.height(16.dp)) }&#10;        }&#10;    }&#10;&#10;    // 提交成功对话框&#10;    if (showSubmitDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showSubmitDialog = false },&#10;            title = { Text(&quot;反馈提交成功&quot;) },&#10;            text = { Text(&quot;感谢您的反馈，我们会认真处理您的意见和建议！&quot;) },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showSubmitDialog = false&#10;                        feedbackText = &quot;&quot;&#10;                    }&#10;                ) {&#10;                    Text(&quot;确定&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FeedbackSection(&#10;    title: String,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = title,&#10;            fontSize = 14.sp,&#10;            fontWeight = FontWeight.Medium,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;        )&#10;        &#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            content()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun HelpItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    description: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;            .padding(16.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.size(24.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(16.dp))&#10;        &#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Text(&#10;                text = description,&#10;                fontSize = 12.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;        }&#10;        &#10;        Icon(&#10;            imageVector = Icons.Default.ChevronRight,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FAQItem(&#10;    question: String,&#10;    answer: String&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { expanded = !expanded }&#10;            .padding(16.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = question,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            Icon(&#10;                imageVector = if (expanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;            )&#10;        }&#10;        &#10;        if (expanded) {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = answer,&#10;                fontSize = 14.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f),&#10;                lineHeight = 20.sp&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FeedbackTypeChip(&#10;    text: String,&#10;    selected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    FilterChip(&#10;        onClick = onClick,&#10;        label = { Text(text) },&#10;        selected = selected&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ContactItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    content: String,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;            .padding(16.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.size(24.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(16.dp))&#10;        &#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Text(&#10;                text = content,&#10;                fontSize = 12.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;        }&#10;        &#10;        Icon(&#10;            imageVector = Icons.Default.ChevronRight,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>