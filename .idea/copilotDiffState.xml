<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.petnestiq&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.petnestiq&quot;&#10;        minSdk = 26  // 提高到API 26以获得更好的Material You支持&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;3.1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.5&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;    // 添加动态颜色支持（获取色）&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.1.2&quot;)&#10;&#10;    // 添加Coil库用于图片加载&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // 添加Gson用于JSON序列化&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // 添加MQTT客户端&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5&quot;)&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.android.service:1.1.1&quot;)&#10;&#10;    // 添加网络请求库用于AI聊天&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    // 添加ExoPlayer用于视频流播放&#10;    implementation(&quot;androidx.media3:media3-exoplayer:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-ui:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-common:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-hls:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-rtsp:1.2.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.petnestiq&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.petnestiq&quot;&#10;        minSdk = 26  // 提高到API 26以获得更好的Material You支持&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;3.1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.5&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;    // 添加动态颜色支持（获取色）&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.1.2&quot;)&#10;&#10;    // 添加Coil库用于图片加载&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // 添加Gson用于JSON序列化&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // 添加MQTT客户端&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5&quot;)&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.android.service:1.1.1&quot;)&#10;&#10;    // 添加网络请求库用于AI聊天&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    // 添加ExoPlayer用于视频流播放&#10;    implementation(&quot;androidx.media3:media3-exoplayer:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-ui:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-common:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-hls:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-rtsp:1.2.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false&#10;) {&#10;    fun getFormattedTime(): String {&#10;        val sdf = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        return sdf.format(Date(timestamp))&#10;    }&#10;}&#10;&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false,&#10;    val isStreaming: Boolean = false&#10;) {&#10;    fun getFormattedTime(): String {&#10;        val sdf = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        return sdf.format(Date(timestamp))&#10;    }&#10;}&#10;&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;&#10;/**&#10; * 流式响应数据模型&#10; */&#10;data class StreamChoice(&#10;    val index: Int,&#10;    val delta: StreamDelta,&#10;    val finish_reason: String?&#10;)&#10;&#10;data class StreamDelta(&#10;    val content: String?&#10;)&#10;&#10;data class StreamResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;StreamChoice&gt;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceConfigManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/DeviceConfigManager.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;&#10;data class MqttConfig(&#10;    val serverUrl: String = &quot;mqtt://localhost&quot;,&#10;    val port: Int = 1883,&#10;    val clientId: String = &quot;PetNestIQ_Client&quot;,&#10;    val username: String = &quot;&quot;,&#10;    val password: String = &quot;&quot;,&#10;    val subscribeTopic: String = &quot;/device/data&quot;,&#10;    val publishTopic: String = &quot;/device/control&quot;,&#10;    val useSSL: Boolean = false,&#10;    val autoReconnect: Boolean = true&#10;)&#10;&#10;data class BluetoothConfig(&#10;    val deviceName: String = &quot;PetNest Device&quot;,&#10;    val macAddress: String = &quot;&quot;,&#10;    val autoConnect: Boolean = false,&#10;    val connectionTimeout: Int = 30&#10;)&#10;&#10;data class DeviceConfig(&#10;    val name: String,&#10;    val mqttConfig: MqttConfig,&#10;    val bluetoothConfig: BluetoothConfig,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;&#10;class DeviceConfigManager private constructor(private val context: Context) {&#10;    private val preferences: SharedPreferences = context.getSharedPreferences(&#10;        &quot;device_config_prefs&quot;, Context.MODE_PRIVATE&#10;    )&#10;&#10;    private val gson = Gson()&#10;&#10;    // MQTT配置状态&#10;    private val _mqttConfig = MutableStateFlow(loadMqttConfig())&#10;    val mqttConfig: StateFlow&lt;MqttConfig&gt; = _mqttConfig.asStateFlow()&#10;&#10;    // 蓝牙配置状态&#10;    private val _bluetoothConfig = MutableStateFlow(loadBluetoothConfig())&#10;    val bluetoothConfig: StateFlow&lt;BluetoothConfig&gt; = _bluetoothConfig.asStateFlow()&#10;&#10;    // 已保存的配置列表&#10;    private val _configList = MutableStateFlow(loadConfigList())&#10;    val configList: StateFlow&lt;List&lt;String&gt;&gt; = _configList.asStateFlow()&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: DeviceConfigManager? = null&#10;&#10;        fun getInstance(context: Context): DeviceConfigManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: DeviceConfigManager(context.applicationContext).also { INSTANCE = it }&#10;            }&#10;        }&#10;&#10;        private const val KEY_MQTT_CONFIG = &quot;mqtt_config&quot;&#10;        private const val KEY_BLUETOOTH_CONFIG = &quot;bluetooth_config&quot;&#10;        private const val KEY_CONFIG_LIST = &quot;config_list&quot;&#10;        private const val KEY_CONFIG_PREFIX = &quot;saved_config_&quot;&#10;    }&#10;&#10;    // 加载MQTT配置&#10;    private fun loadMqttConfig(): MqttConfig {&#10;        val configJson = preferences.getString(KEY_MQTT_CONFIG, null)&#10;        return if (configJson != null) {&#10;            try {&#10;                gson.fromJson(configJson, MqttConfig::class.java) ?: MqttConfig()&#10;            } catch (e: Exception) {&#10;                MqttConfig() // 返回默认配置&#10;            }&#10;        } else {&#10;            MqttConfig() // 返回默认配置&#10;        }&#10;    }&#10;&#10;    // 加载蓝牙配置&#10;    private fun loadBluetoothConfig(): BluetoothConfig {&#10;        val configJson = preferences.getString(KEY_BLUETOOTH_CONFIG, null)&#10;        return if (configJson != null) {&#10;            try {&#10;                gson.fromJson(configJson, BluetoothConfig::class.java) ?: BluetoothConfig()&#10;            } catch (e: Exception) {&#10;                BluetoothConfig() // 返回默认配置&#10;            }&#10;        } else {&#10;            BluetoothConfig() // 返回默认配置&#10;        }&#10;    }&#10;&#10;    // 加载配置列表&#10;    private fun loadConfigList(): List&lt;String&gt; {&#10;        val configListJson = preferences.getString(KEY_CONFIG_LIST, null)&#10;        return if (configListJson != null) {&#10;            try {&#10;                val type = object : TypeToken&lt;List&lt;String&gt;&gt;() {}.type&#10;                gson.fromJson(configListJson, type) ?: emptyList()&#10;            } catch (e: Exception) {&#10;                emptyList()&#10;            }&#10;        } else {&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    // 更新MQTT配置&#10;    fun updateMqttConfig(config: MqttConfig) {&#10;        _mqttConfig.value = config&#10;        saveMqttConfig(config)&#10;    }&#10;&#10;    // 更新蓝牙配置&#10;    fun updateBluetoothConfig(config: BluetoothConfig) {&#10;        _bluetoothConfig.value = config&#10;        saveBluetoothConfig(config)&#10;    }&#10;&#10;    // 保存MQTT配置&#10;    private fun saveMqttConfig(config: MqttConfig) {&#10;        val configJson = gson.toJson(config)&#10;        preferences.edit()&#10;            .putString(KEY_MQTT_CONFIG, configJson)&#10;            .apply()&#10;    }&#10;&#10;    // 保存蓝牙配置&#10;    private fun saveBluetoothConfig(config: BluetoothConfig) {&#10;        val configJson = gson.toJson(config)&#10;        preferences.edit()&#10;            .putString(KEY_BLUETOOTH_CONFIG, configJson)&#10;            .apply()&#10;    }&#10;&#10;    // 保存完整配置组合&#10;    fun saveConfig(name: String) {&#10;        val deviceConfig = DeviceConfig(&#10;            name = name,&#10;            mqttConfig = _mqttConfig.value,&#10;            bluetoothConfig = _bluetoothConfig.value&#10;        )&#10;&#10;        // 保存配置到SharedPreferences&#10;        val configJson = gson.toJson(deviceConfig)&#10;        preferences.edit()&#10;            .putString(KEY_CONFIG_PREFIX + name, configJson)&#10;            .apply()&#10;&#10;        // 更新配置列表&#10;        val currentList = _configList.value.toMutableList()&#10;        if (!currentList.contains(name)) {&#10;            currentList.add(name)&#10;            _configList.value = currentList&#10;            saveConfigList(currentList)&#10;        }&#10;    }&#10;&#10;    // 加载完整配置组合&#10;    fun loadConfig(name: String) {&#10;        val configJson = preferences.getString(KEY_CONFIG_PREFIX + name, null)&#10;        if (configJson != null) {&#10;            try {&#10;                val deviceConfig = gson.fromJson(configJson, DeviceConfig::class.java)&#10;                if (deviceConfig != null) {&#10;                    updateMqttConfig(deviceConfig.mqttConfig)&#10;                    updateBluetoothConfig(deviceConfig.bluetoothConfig)&#10;                }&#10;            } catch (e: Exception) {&#10;                // 加载失败，保持当前配置&#10;            }&#10;        }&#10;    }&#10;&#10;    // 删除保存的配置&#10;    fun deleteConfig(name: String) {&#10;        preferences.edit()&#10;            .remove(KEY_CONFIG_PREFIX + name)&#10;            .apply()&#10;&#10;        val currentList = _configList.value.toMutableList()&#10;        currentList.remove(name)&#10;        _configList.value = currentList&#10;        saveConfigList(currentList)&#10;    }&#10;&#10;    // 保存配置列表&#10;    private fun saveConfigList(list: List&lt;String&gt;) {&#10;        val listJson = gson.toJson(list)&#10;        preferences.edit()&#10;            .putString(KEY_CONFIG_LIST, listJson)&#10;            .apply()&#10;    }&#10;&#10;    // 获取当前MQTT配置（用于其他组件访问）&#10;    fun getCurrentMqttConfig(): MqttConfig = _mqttConfig.value&#10;&#10;    // 获取当前蓝牙配置（用于其他组件访问）&#10;    fun getCurrentBluetoothConfig(): BluetoothConfig = _bluetoothConfig.value&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.SharedPreferences&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import com.google.gson.Gson&#13;&#10;import com.google.gson.reflect.TypeToken&#13;&#10;&#13;&#10;data class MqttConfig(&#13;&#10;    val serverUrl: String = &quot;ssl://e35491cb0c.st1.iotda-device.cn-north-4.myhuaweicloud.com&quot;,&#13;&#10;    val port: Int = 8883,&#13;&#10;    val clientId: String = &quot;688879e2d582f20018403921_text1_0_0_2025072907&quot;,&#13;&#10;    val username: String = &quot;688879e2d582f20018403921_text1&quot;,&#13;&#10;    val password: String = &quot;bdd6a2f87eab3e9dd81325957547fa3b5b566f1abfbdb9850249b3b4984f277e&quot;,&#13;&#10;    val subscribeTopic: String = &quot;/device/data&quot;,&#13;&#10;    val publishTopic: String = &quot;/device/control&quot;,&#13;&#10;    val useSSL: Boolean = true,&#13;&#10;    val autoReconnect: Boolean = true&#13;&#10;)&#13;&#10;&#13;&#10;data class BluetoothConfig(&#13;&#10;    val deviceName: String = &quot;PetNest Device&quot;,&#13;&#10;    val macAddress: String = &quot;&quot;,&#13;&#10;    val autoConnect: Boolean = false,&#13;&#10;    val connectionTimeout: Int = 30&#13;&#10;)&#13;&#10;&#13;&#10;data class DeviceConfig(&#13;&#10;    val name: String,&#13;&#10;    val mqttConfig: MqttConfig,&#13;&#10;    val bluetoothConfig: BluetoothConfig,&#13;&#10;    val timestamp: Long = System.currentTimeMillis()&#13;&#10;)&#13;&#10;&#13;&#10;class DeviceConfigManager private constructor(private val context: Context) {&#13;&#10;    private val preferences: SharedPreferences = context.getSharedPreferences(&#13;&#10;        &quot;device_config_prefs&quot;, Context.MODE_PRIVATE&#13;&#10;    )&#13;&#10;&#13;&#10;    private val gson = Gson()&#13;&#10;&#13;&#10;    // MQTT配置状态&#13;&#10;    private val _mqttConfig = MutableStateFlow(loadMqttConfig())&#13;&#10;    val mqttConfig: StateFlow&lt;MqttConfig&gt; = _mqttConfig.asStateFlow()&#13;&#10;&#13;&#10;    // 蓝牙配置状态&#13;&#10;    private val _bluetoothConfig = MutableStateFlow(loadBluetoothConfig())&#13;&#10;    val bluetoothConfig: StateFlow&lt;BluetoothConfig&gt; = _bluetoothConfig.asStateFlow()&#13;&#10;&#13;&#10;    // 已保存的配置列表&#13;&#10;    private val _configList = MutableStateFlow(loadConfigList())&#13;&#10;    val configList: StateFlow&lt;List&lt;String&gt;&gt; = _configList.asStateFlow()&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        @Volatile&#13;&#10;        private var INSTANCE: DeviceConfigManager? = null&#13;&#10;&#13;&#10;        fun getInstance(context: Context): DeviceConfigManager {&#13;&#10;            return INSTANCE ?: synchronized(this) {&#13;&#10;                INSTANCE ?: DeviceConfigManager(context.applicationContext).also { INSTANCE = it }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        private const val KEY_MQTT_CONFIG = &quot;mqtt_config&quot;&#13;&#10;        private const val KEY_BLUETOOTH_CONFIG = &quot;bluetooth_config&quot;&#13;&#10;        private const val KEY_CONFIG_LIST = &quot;config_list&quot;&#13;&#10;        private const val KEY_CONFIG_PREFIX = &quot;saved_config_&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载MQTT配置&#13;&#10;    private fun loadMqttConfig(): MqttConfig {&#13;&#10;        val configJson = preferences.getString(KEY_MQTT_CONFIG, null)&#13;&#10;        return if (configJson != null) {&#13;&#10;            try {&#13;&#10;                gson.fromJson(configJson, MqttConfig::class.java) ?: MqttConfig()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                MqttConfig() // 返回默认配置&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            MqttConfig() // 返回默认配置&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载蓝牙配置&#13;&#10;    private fun loadBluetoothConfig(): BluetoothConfig {&#13;&#10;        val configJson = preferences.getString(KEY_BLUETOOTH_CONFIG, null)&#13;&#10;        return if (configJson != null) {&#13;&#10;            try {&#13;&#10;                gson.fromJson(configJson, BluetoothConfig::class.java) ?: BluetoothConfig()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                BluetoothConfig() // 返回默认配置&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            BluetoothConfig() // 返回默认配置&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载配置列表&#13;&#10;    private fun loadConfigList(): List&lt;String&gt; {&#13;&#10;        val configListJson = preferences.getString(KEY_CONFIG_LIST, null)&#13;&#10;        return if (configListJson != null) {&#13;&#10;            try {&#13;&#10;                val type = object : TypeToken&lt;List&lt;String&gt;&gt;() {}.type&#13;&#10;                gson.fromJson(configListJson, type) ?: emptyList()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                emptyList()&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            emptyList()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 更新MQTT配置&#13;&#10;    fun updateMqttConfig(config: MqttConfig) {&#13;&#10;        _mqttConfig.value = config&#13;&#10;        saveMqttConfig(config)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 更新蓝牙配置&#13;&#10;    fun updateBluetoothConfig(config: BluetoothConfig) {&#13;&#10;        _bluetoothConfig.value = config&#13;&#10;        saveBluetoothConfig(config)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存MQTT配置&#13;&#10;    private fun saveMqttConfig(config: MqttConfig) {&#13;&#10;        val configJson = gson.toJson(config)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_MQTT_CONFIG, configJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存蓝牙配置&#13;&#10;    private fun saveBluetoothConfig(config: BluetoothConfig) {&#13;&#10;        val configJson = gson.toJson(config)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_BLUETOOTH_CONFIG, configJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存完整配置组合&#13;&#10;    fun saveConfig(name: String) {&#13;&#10;        val deviceConfig = DeviceConfig(&#13;&#10;            name = name,&#13;&#10;            mqttConfig = _mqttConfig.value,&#13;&#10;            bluetoothConfig = _bluetoothConfig.value&#13;&#10;        )&#13;&#10;&#13;&#10;        // 保存配置到SharedPreferences&#13;&#10;        val configJson = gson.toJson(deviceConfig)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_CONFIG_PREFIX + name, configJson)&#13;&#10;            .apply()&#13;&#10;&#13;&#10;        // 更新配置列表&#13;&#10;        val currentList = _configList.value.toMutableList()&#13;&#10;        if (!currentList.contains(name)) {&#13;&#10;            currentList.add(name)&#13;&#10;            _configList.value = currentList&#13;&#10;            saveConfigList(currentList)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 加载完整配置组合&#13;&#10;    fun loadConfig(name: String) {&#13;&#10;        val configJson = preferences.getString(KEY_CONFIG_PREFIX + name, null)&#13;&#10;        if (configJson != null) {&#13;&#10;            try {&#13;&#10;                val deviceConfig = gson.fromJson(configJson, DeviceConfig::class.java)&#13;&#10;                if (deviceConfig != null) {&#13;&#10;                    updateMqttConfig(deviceConfig.mqttConfig)&#13;&#10;                    updateBluetoothConfig(deviceConfig.bluetoothConfig)&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                // 加载失败，保持当前配置&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 删除保存的配置&#13;&#10;    fun deleteConfig(name: String) {&#13;&#10;        preferences.edit()&#13;&#10;            .remove(KEY_CONFIG_PREFIX + name)&#13;&#10;            .apply()&#13;&#10;&#13;&#10;        val currentList = _configList.value.toMutableList()&#13;&#10;        currentList.remove(name)&#13;&#10;        _configList.value = currentList&#13;&#10;        saveConfigList(currentList)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 保存配置列表&#13;&#10;    private fun saveConfigList(list: List&lt;String&gt;) {&#13;&#10;        val listJson = gson.toJson(list)&#13;&#10;        preferences.edit()&#13;&#10;            .putString(KEY_CONFIG_LIST, listJson)&#13;&#10;            .apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    // 获取当前MQTT配置（用于其他组件访问）&#13;&#10;    fun getCurrentMqttConfig(): MqttConfig = _mqttConfig.value&#13;&#10;&#13;&#10;    // 获取当前蓝牙配置（用于其他组件访问）&#13;&#10;    fun getCurrentBluetoothConfig(): BluetoothConfig = _bluetoothConfig.value&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;PetNest IQ&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;喵星人の智能窝&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>