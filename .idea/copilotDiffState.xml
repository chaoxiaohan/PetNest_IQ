<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.petnestiq&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.petnestiq&quot;&#10;        minSdk = 26  // 提高到API 26以获得更好的Material You支持&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;3.0.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.5&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;    // 添加动态颜色支持（莫奈取色）&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.1.2&quot;)&#10;&#10;    // 添加Coil库用于图片加载&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // 添加Gson用于JSON序列化&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // 添加MQTT客户端&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5&quot;)&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.android.service:1.1.1&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.petnestiq&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.petnestiq&quot;&#10;        minSdk = 26  // 提高到API 26以获得更好的Material You支持&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;3.0.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.5&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;    // 添加动态颜色支持（获取色）&#10;    implementation(&quot;androidx.compose.material3:material3-window-size-class:1.1.2&quot;)&#10;&#10;    // 添加Coil库用于图片加载&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // 添加Gson用于JSON序列化&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // 添加MQTT客户端&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5&quot;)&#10;    implementation(&quot;org.eclipse.paho:org.eclipse.paho.android.service:1.1.1&quot;)&#10;&#10;    // 添加网络请求库用于AI聊天&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;&#10;    // 添加ExoPlayer用于视频流播放&#10;    implementation(&quot;androidx.media3:media3-exoplayer:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-ui:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-common:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-hls:1.2.0&quot;)&#10;    implementation(&quot;androidx.media3:media3-exoplayer-rtsp:1.2.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/data/ChatData.kt" />
              <option name="originalContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false&#10;) {&#10;    fun getFormattedTime(): String {&#10;        val sdf = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        return sdf.format(Date(timestamp))&#10;    }&#10;}&#10;&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.data&#10;&#10;import java.util.UUID&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 聊天消息数据类&#10; */&#10;data class ChatMessage(&#10;    val id: String = UUID.randomUUID().toString(),&#10;    val content: String,&#10;    val isFromUser: Boolean,&#10;    val timestamp: Long = System.currentTimeMillis(),&#10;    val isTyping: Boolean = false,&#10;    val isStreaming: Boolean = false&#10;) {&#10;    fun getFormattedTime(): String {&#10;        val sdf = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        return sdf.format(Date(timestamp))&#10;    }&#10;}&#10;&#10;/**&#10; * DeepSeek API 请求数据模型&#10; */&#10;data class DeepSeekRequest(&#10;    val model: String = &quot;deepseek-chat&quot;,&#10;    val messages: List&lt;ApiMessage&gt;,&#10;    val temperature: Double = 0.7,&#10;    val max_tokens: Int = 1000,&#10;    val stream: Boolean = false&#10;)&#10;&#10;data class ApiMessage(&#10;    val role: String, // &quot;user&quot; 或 &quot;assistant&quot; 或 &quot;system&quot;&#10;    val content: String&#10;)&#10;&#10;/**&#10; * DeepSeek API 响应数据模型&#10; */&#10;data class DeepSeekResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;Choice&gt;,&#10;    val usage: Usage&#10;)&#10;&#10;data class Choice(&#10;    val index: Int,&#10;    val message: ApiMessage,&#10;    val finish_reason: String&#10;)&#10;&#10;data class Usage(&#10;    val prompt_tokens: Int,&#10;    val completion_tokens: Int,&#10;    val total_tokens: Int&#10;)&#10;&#10;/**&#10; * 流式响应数据模型&#10; */&#10;data class StreamChoice(&#10;    val index: Int,&#10;    val delta: StreamDelta,&#10;    val finish_reason: String?&#10;)&#10;&#10;data class StreamDelta(&#10;    val content: String?&#10;)&#10;&#10;data class StreamResponse(&#10;    val id: String,&#10;    val objectType: String,&#10;    val created: Long,&#10;    val model: String,&#10;    val choices: List&lt;StreamChoice&gt;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/viewmodel/AiChatViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/petnestiq/viewmodel/AiChatViewModel.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.petnestiq.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.petnestiq.data.ChatMessage&#10;import com.example.petnestiq.service.DeepSeekApiService&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.delay&#10;import java.util.UUID&#10;&#10;/**&#10; * AI聊天界面的ViewModel&#10; */&#10;class AiChatViewModel : ViewModel() {&#10;&#10;    private val _messages = MutableStateFlow&lt;List&lt;ChatMessage&gt;&gt;(emptyList())&#10;    val messages: StateFlow&lt;List&lt;ChatMessage&gt;&gt; = _messages.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    /**&#10;     * 发送消息给AI&#10;     */&#10;    fun sendMessage(content: String) {&#10;        if (content.isBlank() || _isLoading.value) return&#10;&#10;        // 添加用户消息&#10;        val userMessage = ChatMessage(&#10;            content = content,&#10;            isFromUser = true&#10;        )&#10;        _messages.value = _messages.value + userMessage&#10;&#10;        // 开始加载&#10;        _isLoading.value = true&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // 调用DeepSeek API&#10;                val aiResponse = DeepSeekApiService.sendMessage(content)&#10;&#10;                // 添加AI回复&#10;                val aiMessage = ChatMessage(&#10;                    content = aiResponse,&#10;                    isFromUser = false&#10;                )&#10;                _messages.value = _messages.value + aiMessage&#10;&#10;            } catch (e: Exception) {&#10;                // 添加错误消息&#10;                val errorMessage = ChatMessage(&#10;                    content = &quot;抱歉，我现在遇到了一些问题，请稍后重试。&quot;,&#10;                    isFromUser = false&#10;                )&#10;                _messages.value = _messages.value + errorMessage&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 发送消息给AI（逐字符显示）&#10;     */&#10;    fun sendMessageStream(content: String) {&#10;        if (content.isBlank() || _isLoading.value) return&#10;&#10;        // 添加用户消息&#10;        val userMessage = ChatMessage(&#10;            content = content,&#10;            isFromUser = true&#10;        )&#10;        _messages.value = _messages.value + userMessage&#10;&#10;        // 开始加载&#10;        _isLoading.value = true&#10;&#10;        // 创建一个空的AI消息，用于逐字符更新&#10;        val aiMessageId = UUID.randomUUID().toString()&#10;        val initialAiMessage = ChatMessage(&#10;            id = aiMessageId,&#10;            content = &quot;&quot;,&#10;            isFromUser = false,&#10;            isStreaming = true&#10;        )&#10;        _messages.value = _messages.value + initialAiMessage&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                // 首先获取完整的AI回复&#10;                val fullResponse = DeepSeekApiService.sendMessage(content)&#10;&#10;                // 然后逐字符显示&#10;                displayTextCharByChar(aiMessageId, fullResponse)&#10;&#10;            } catch (e: Exception) {&#10;                // 添加错误消息&#10;                val errorMessage = ChatMessage(&#10;                    content = &quot;抱歉，我现在遇到了一些问题，请稍后重试。&quot;,&#10;                    isFromUser = false&#10;                )&#10;&#10;                // 移除之前的空AI消息，添加错误消息&#10;                _messages.value = _messages.value.filter { it.id != aiMessageId } + errorMessage&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 逐字符显示文本&#10;     */&#10;    private suspend fun displayTextCharByChar(messageId: String, fullText: String) {&#10;        var displayedText = &quot;&quot;&#10;&#10;        for (char in fullText) {&#10;            displayedText += char&#10;&#10;            // 更新消息内容&#10;            _messages.value = _messages.value.map { message -&gt;&#10;                if (message.id == messageId) {&#10;                    message.copy(&#10;                        content = displayedText,&#10;                        isStreaming = true&#10;                    )&#10;                } else {&#10;                    message&#10;                }&#10;            }&#10;&#10;            // 根据字符类型调整显示速度&#10;            val delayTime = when {&#10;                char == '\n' -&gt; 100L // 换行符稍微长一点&#10;                char.isWhitespace() -&gt; 20L // 空格较快&#10;                isPunctuation(char) -&gt; 80L // 标点符号&#10;                char.code &gt; 127 -&gt; 50L // 中文字符&#10;                else -&gt; 30L // 英文字符&#10;            }&#10;&#10;            delay(delayTime)&#10;        }&#10;&#10;        // 显示完成，更新最终状态&#10;        _messages.value = _messages.value.map { message -&gt;&#10;            if (message.id == messageId) {&#10;                message.copy(isStreaming = false)&#10;            } else {&#10;                message&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 清空聊天记录&#10;     */&#10;    fun clearChat() {&#10;        _messages.value = emptyList()&#10;    }&#10;&#10;    /**&#10;     * 判断字符是否为标点符号&#10;     */&#10;    private fun isPunctuation(char: Char): Boolean {&#10;        // 简单判断常见标点符号&#10;        return char in &quot;，。！？；：,.!?&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>