package com.example.petnestiq.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DeviceScreen() {
    // ËøûÊé•Áä∂ÊÄÅ - ÂèØ‰ª•ÊòØ Connected, Disconnected, null
    var connectionStatus by remember { mutableStateOf<String?>(null) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // ‰∏äÂçäÈÉ®ÂàÜ - 2/5 Â±èÂπï
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .weight(2f)
        ) {
            // ËøûÊé•Áä∂ÊÄÅÂç°Áâá
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Áä∂ÊÄÅÊåáÁ§∫ÁÇπ - Ê†πÊçÆËøûÊé•Áä∂ÊÄÅÂèòËâ≤
                    val indicatorColor = when (connectionStatus) {
                        "Connected" -> Color(0xFF4CAF50) // ÁªøËâ≤
                        "Disconnected" -> Color(0xFFF44336) // Á∫¢Ëâ≤
                        else -> Color(0xFFF44336) // ÈªòËÆ§Á∫¢Ëâ≤
                    }

                    Box(
                        modifier = Modifier
                            .size(12.dp)
                            .clip(CircleShape)
                            .background(indicatorColor)
                    )
                    Spacer(modifier = Modifier.width(12.dp))
                    Text(
                        text = "ËøûÊé•Áä∂ÊÄÅÔºö${connectionStatus ?: "null"}",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        fontWeight = FontWeight.Medium
                    )
                }
            }

            // ËÆæÂ§áÂõæÁâáÂå∫Âüü
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "üè†",
                            style = MaterialTheme.typography.displayLarge
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "PetNest Êô∫ËÉΩÁå´Á™ù",
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.onSurface,
                            textAlign = TextAlign.Center,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        // ‰∏ãÂçäÈÉ®ÂàÜ - 3/5 Â±èÂπï - ËÆæÂ§áÁä∂ÊÄÅ
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .weight(3f)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "ËÆæÂ§áÁä∂ÊÄÅ",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary
                )

                // Âà∑Êñ∞ÊåâÈíÆ
                TextButton(
                    onClick = {
                        // Ê®°ÊãüÁä∂ÊÄÅÂàáÊç¢
                        connectionStatus = when (connectionStatus) {
                            null -> "Connected"
                            "Connected" -> "Disconnected"
                            else -> "Connected"
                        }
                    }
                ) {
                    Text("Âà∑Êñ∞")
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Áä∂ÊÄÅÁΩëÊ†º
            val statusItems = listOf(
                "Ê∏©Â∫¶" to "25¬∞C",
                "ÊπøÂ∫¶" to "60%",
                "ÊòØÂê¶Âú®Áå´Á™ù" to "ÊòØ",
                "Âä†ÁÉ≠Áä∂ÊÄÅ" to "ÂÖ≥Èó≠",
                "ÈÄöÈ£éÁä∂ÊÄÅ" to "ÂºÄÂêØ",
                "Ê∂àÊØíÁä∂ÊÄÅ" to "ÂÖ≥Èó≠",
                "È£üÁâ©Áä∂ÊÄÅ" to "ÂÖÖË∂≥",
                "Ê∞¥Áä∂ÊÄÅ" to "Ê≠£Â∏∏"
            )

            LazyVerticalGrid(
                columns = GridCells.Fixed(2),
                horizontalArrangement = Arrangement.spacedBy(12.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier.fillMaxSize()
            ) {
                items(statusItems) { (label, value) ->
                    StatusCard(label = label, value = value)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StatusCard(label: String, value: String) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(90.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = label,
                style = MaterialTheme.typography.labelLarge,
                color = MaterialTheme.colorScheme.onSecondaryContainer,
                fontWeight = FontWeight.Medium
            )
            Spacer(modifier = Modifier.height(6.dp))
            Text(
                text = value,
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.onSecondaryContainer,
                fontWeight = FontWeight.Bold
            )
        }
    }
}
